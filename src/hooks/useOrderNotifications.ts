'use client';

import { useEffect, useRef, useState, useCallback } from 'react';

interface OrderNotification {
  type: string; // "new_order" | "order_updated" | "connected"
  data: {
    orderId?: string;
    total?: number;
    status?: string;
    name?: string;
    phone?: string;
    address?: string;
    itemsCount?: number;
    createdAt?: string;
    updatedAt?: string;
    message?: string;
  };
}

interface UseOrderNotificationsReturn {
  isConnected: boolean;
  notifications: OrderNotification[];
  clearNotifications: () => void;
  reconnect: () => void;
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 */
export function useOrderNotifications(token: string | null): UseOrderNotificationsReturn {
  const [isConnected, setIsConnected] = useState(false);
  const [notifications, setNotifications] = useState<OrderNotification[]>([]);
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  const connect = useCallback(() => {
    if (!token) {
      console.log('‚ö†Ô∏è No token provided, skipping WebSocket connection');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É (–¥–ª—è SSR —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (typeof window === 'undefined') {
      console.log('‚ö†Ô∏è Window is undefined, skipping WebSocket connection');
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è WebSocket
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const host = process.env.NEXT_PUBLIC_API_URL 
      ? process.env.NEXT_PUBLIC_API_URL.replace(/^https?:\/\//, '')
      : 'localhost:8080';
    const wsUrl = `${protocol}//${host}/api/admin/ws?token=${encodeURIComponent(token)}`;

    console.log('üîå Connecting to WebSocket:', wsUrl);

    try {
      const ws = new WebSocket(wsUrl);

      ws.onopen = () => {
        console.log('‚úÖ WebSocket connected');
        setIsConnected(true);
      };

      ws.onmessage = (event) => {
        try {
          const message: OrderNotification = JSON.parse(event.data);
          console.log('üì® WebSocket message received:', message);

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (message.type === 'connected') {
            console.log('‚úÖ WebSocket acknowledged connection:', message.data.message);
            return;
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
          if (message.type === 'new_order') {
            setNotifications((prev) => [message, ...prev]);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
            if ('Notification' in window && Notification.permission === 'granted') {
              new Notification('üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!', {
                body: `–ó–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${message.data.total}‚ÇΩ –æ—Ç ${message.data.name}`,
                icon: '/favicon.ico',
                tag: message.data.orderId,
              });
            }

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            try {
              const audio = new Audio('/notification.mp3');
              audio.volume = 0.5; // –°—Ä–µ–¥–Ω—è—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
              audio.play().catch((error) => {
                console.log('üîá –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
              });
            } catch (error) {
              console.log('üîá –ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            }
          }

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
          if (message.type === 'order_updated') {
            console.log('üîÑ Order status updated:', message.data);
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é)
          }
        } catch (error) {
          console.error('‚ùå Error parsing WebSocket message:', error);
        }
      };

      ws.onerror = (error) => {
        console.error('‚ùå WebSocket error:', error);
        setIsConnected(false);
      };

      ws.onclose = () => {
        console.log('üîå WebSocket disconnected');
        setIsConnected(false);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        reconnectTimeoutRef.current = setTimeout(() => {
          console.log('üîÑ Attempting to reconnect...');
          connect();
        }, 5000);
      };

      wsRef.current = ws;
    } catch (error) {
      console.error('‚ùå Error creating WebSocket:', error);
      setIsConnected(false);
    }
  }, [token]);

  const disconnect = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }

    if (wsRef.current) {
      wsRef.current.close();
      wsRef.current = null;
    }

    setIsConnected(false);
  }, []);

  const reconnect = useCallback(() => {
    disconnect();
    connect();
  }, [connect, disconnect]);

  const clearNotifications = useCallback(() => {
    setNotifications([]);
  }, []);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    connect();

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if ('Notification' in window && Notification.permission === 'default') {
      Notification.requestPermission().then((permission) => {
        console.log('üîî Notification permission:', permission);
      });
    }

    return () => {
      disconnect();
    };
  }, [connect, disconnect]);

  return {
    isConnected,
    notifications,
    clearNotifications,
    reconnect,
  };
}
