import { useEffect, useRef, useState } from "react";

const RUST_BOT_URL = process.env.NEXT_PUBLIC_RUST_BOT_URL!.replace("http", "ws");

export function useChatSocket() {
  const [messages, setMessages] = useState<string[]>([]);
  const [isConnected, setIsConnected] = useState(false);
  const socketRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
    if (typeof window === "undefined") return;

    async function connect() {
      try {
        console.log("üîå Attempting to connect to:", `${RUST_BOT_URL}/ws`);

        // üîë –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –∏–∑ localStorage (–Ω–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        const token = localStorage.getItem("token");
        
        console.log("üîë Token status:", {
          exists: !!token,
          length: token?.length || 0,
          preview: token ? token.substring(0, 20) + "..." : "null"
        });

        // üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Rust WebSocket —Å–µ—Ä–≤–µ—Ä—É —Å —Ç–æ–∫–µ–Ω–æ–º
        const wsUrl = token 
          ? `${RUST_BOT_URL}/ws?token=${encodeURIComponent(token)}`
          : `${RUST_BOT_URL}/ws`;

        console.log("üåê WebSocket URL:", wsUrl.replace(/token=[^&]+/, "token=***"));

        const socket = new WebSocket(wsUrl);
        socketRef.current = socket;

        socket.onopen = () => {
          console.log("‚úÖ Connected to Rust bot at", wsUrl.replace(/token=[^&]+/, "token=***"));
          setIsConnected(true);
          setMessages((prev) => [...prev, "ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ FodiFood Bot"]);
        };

        socket.onmessage = (event) => {
          console.log("üì® Received raw:", event.data);
          
          try {
            const data = JSON.parse(event.data);
            console.log("üì¶ Parsed JSON:", data);
            
            if (data.type === "error") {
              console.error("‚ùå Error from bot:", data.message);
              setMessages((prev) => [...prev, `‚ö†Ô∏è –û—à–∏–±–∫–∞: ${data.message}`]);
              
              // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
              if (data.message.includes("authenticated")) {
                console.error("üîê Authentication failed. Please login first!");
                setMessages((prev) => [...prev, `üí° –°–æ–≤–µ—Ç: –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ /auth/signin`]);
              }
            } else if (data.type === "auth_success") {
              console.log("‚úÖ Auth success:", data);
              
              // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              const userName = data.name || data.email || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
              localStorage.setItem("userName", userName);
              
              setMessages((prev) => [
                ...prev,
                `üéâ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!`
              ]);
            } else if (data.type === "chat_response") {
              console.log("ü§ñ AI response:", data.text);
              const prefix = data.from_ai ? "ü§ñ" : "üë§";
              setMessages((prev) => [...prev, `${prefix} ${data.text}`]);
            } else if (data.type === "message" || data.message) {
              const text = data.message || data.text || JSON.stringify(data);
              console.log("‚úÖ Bot message:", text);
              setMessages((prev) => [...prev, `ü§ñ ${text}`]);
            } else {
              // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON
              console.warn("‚ö†Ô∏è Unknown JSON format:", data);
              setMessages((prev) => [...prev, `ü§ñ ${JSON.stringify(data)}`]);
            }
          } catch (error) {
            // –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            console.log("üìù Plain text message:", event.data);
            setMessages((prev) => [...prev, `ü§ñ ${event.data}`]);
          }
        };

        socket.onerror = (error) => {
          console.error("‚ùå WebSocket error:", error);
          console.error("üîç URL was:", wsUrl.replace(/token=[^&]+/, "token=***"));
          console.error("üí° Make sure Rust bot is running on port 8000");
          setIsConnected(false);
          setMessages((prev) => [...prev, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"]);
        };

        socket.onclose = (event) => {
          console.log("‚ùå Disconnected from Rust bot");
          console.log("üîç Close code:", event.code, "Reason:", event.reason);
          setIsConnected(false);
          setMessages((prev) => [...prev, "‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ"]);
        };
      } catch (err) {
        console.error("üö® –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err);
        setMessages((prev) => [...prev, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket"]);
        setIsConnected(false);
      }
    }

    connect();

    // üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      console.log("üîå Closing WebSocket connection");
      socketRef.current?.close();
    };
  }, []);

  const sendMessage = (text: string) => {
    if (socketRef.current?.readyState === WebSocket.OPEN) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ JSON —Å —è–≤–Ω—ã–º —Ç–∏–ø–æ–º "chat" (IncomingMessage::Chat)
      const message = JSON.stringify({ type: "chat", text });
      console.log("üì§ Sending:", message);
      socketRef.current.send(message);
      setMessages((prev) => [...prev, `üßë ${text}`]);
    } else {
      console.error("WebSocket is not connected");
      setMessages((prev) => [...prev, "‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ"]);
    }
  };

  return { messages, sendMessage, isConnected };
}
