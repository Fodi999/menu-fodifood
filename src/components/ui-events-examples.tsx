/**
 * üìÅ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è UI Events –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 * 
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã —Å real-time UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
 */

'use client';

import { useUIEventListener } from '@/hooks/useUIEvents';
import { useState, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

// 1Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
export function OrdersListExample() {
  const [orders, setOrders] = useState<any[]>([]);
  const [highlightedOrderId, setHighlightedOrderId] = useState<string | null>(null);

  // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –æ—Ç Rust backend
  useUIEventListener<{ orderId: string; status: string }>('ui-update', (data) => {
    if (data.orderId) {
      console.log('üì¶ Order updated:', data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      setOrders((prev) =>
        prev.map((order) =>
          order.id === data.orderId
            ? { ...order, status: data.status }
            : order
        )
      );

      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
      setHighlightedOrderId(data.orderId);
      setTimeout(() => setHighlightedOrderId(null), 2000);
    }
  });

  return (
    <div className="space-y-4">
      {orders.map((order) => (
        <Card
          key={order.id}
          className={
            highlightedOrderId === order.id
              ? 'border-orange-500 shadow-lg transition-all'
              : ''
          }
        >
          <CardHeader>
            <CardTitle className="flex justify-between">
              <span>–ó–∞–∫–∞–∑ #{order.id}</span>
              <Badge>{order.status}</Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>{/* Order details */}</CardContent>
        </Card>
      ))}
    </div>
  );
}

// 2Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä: Dashboard —Å real-time –º–µ—Ç—Ä–∏–∫–∞–º–∏
export function DashboardMetricsExample() {
  const [metrics, setMetrics] = useState({
    revenue: 0,
    orders: 0,
    products: 0,
  });

  useUIEventListener<{
    type: 'metrics_update';
    businessId: string;
    metrics: any;
  }>('ui-update', (data) => {
    if (data.type === 'metrics_update') {
      console.log('üìä Metrics updated:', data.metrics);
      setMetrics(data.metrics);
    }
  });

  return (
    <div className="grid grid-cols-3 gap-4">
      <Card>
        <CardHeader>
          <CardTitle>–í—ã—Ä—É—á–∫–∞</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-3xl font-bold">${metrics.revenue}</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>–ó–∞–∫–∞–∑—ã</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-3xl font-bold">{metrics.orders}</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>–ü—Ä–æ–¥—É–∫—Ç—ã</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-3xl font-bold">{metrics.products}</p>
        </CardContent>
      </Card>
    </div>
  );
}

// 3Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
export function AIRecommendationsModalExample() {
  const [isOpen, setIsOpen] = useState(false);
  const [recommendations, setRecommendations] = useState<string[]>([]);

  useUIEventListener<{
    type: 'ai_recommendations';
    items: string[];
  }>('ui-modal', (data) => {
    if (data.type === 'ai_recommendations') {
      console.log('ü§ñ AI recommendations:', data.items);
      setRecommendations(data.items);
      setIsOpen(true);
    }
  });

  return (
    <>
      {isOpen && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <Card className="w-[500px]">
            <CardHeader>
              <CardTitle>ü§ñ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {recommendations.map((item, idx) => (
                  <li key={idx} className="flex items-start">
                    <span className="mr-2">‚Ä¢</span>
                    <span>{item}</span>
                  </li>
                ))}
              </ul>
              <button
                onClick={() => setIsOpen(false)}
                className="mt-4 w-full bg-orange-500 text-white py-2 rounded hover:bg-orange-600"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </CardContent>
          </Card>
        </div>
      )}
    </>
  );
}

// 4Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä: Inventory —Å real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –Ω–∏–∑–∫–æ–º –∑–∞–ø–∞—Å–µ
export function InventoryAlertsExample() {
  const [alerts, setAlerts] = useState<
    Array<{ productId: string; name: string; stock: number }>
  >([]);

  useUIEventListener<{
    type: 'low_stock_alert';
    productId: string;
    name: string;
    stock: number;
  }>('ui-update', (data) => {
    if (data.type === 'low_stock_alert') {
      console.log('‚ö†Ô∏è Low stock alert:', data);
      setAlerts((prev) => [...prev, data]);
    }
  });

  return (
    <div className="space-y-2">
      {alerts.map((alert, idx) => (
        <Card key={idx} className="border-red-500">
          <CardContent className="flex items-center justify-between p-4">
            <div>
              <p className="font-semibold">{alert.name}</p>
              <p className="text-sm text-gray-500">
                –û—Å—Ç–∞–ª–æ—Å—å: {alert.stock} —à—Ç.
              </p>
            </div>
            <Badge variant="destructive">–ù–∏–∑–∫–∏–π –∑–∞–ø–∞—Å</Badge>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

// 5Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä: Chat —Å real-time —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
export function ChatExample() {
  const [messages, setMessages] = useState<
    Array<{ id: string; text: string; sender: string }>
  >([]);

  useUIEventListener<{
    type: 'new_message';
    message: { id: string; text: string; sender: string };
  }>('ui-update', (data) => {
    if (data.type === 'new_message') {
      console.log('üí¨ New message:', data.message);
      setMessages((prev) => [...prev, data.message]);
    }
  });

  return (
    <Card>
      <CardHeader>
        <CardTitle>üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-2 max-h-[400px] overflow-y-auto">
          {messages.map((msg) => (
            <div
              key={msg.id}
              className={`p-2 rounded ${
                msg.sender === 'user'
                  ? 'bg-orange-100 ml-auto max-w-[70%]'
                  : 'bg-gray-100 mr-auto max-w-[70%]'
              }`}
            >
              <p className="text-sm">{msg.text}</p>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
