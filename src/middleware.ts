import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
const SUPPORTED_LOCALES = ['en', 'ru', 'pl'];
const DEFAULT_LOCALE = 'ru';

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞ –æ—Ç Go API
function getAuthToken(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ cookie (–µ–¥–∏–Ω—ã–π –∫–ª—é—á "token")
  const tokenCookie = request.cookies.get('token');
  if (tokenCookie) {
    return tokenCookie.value;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
  const authHeader = request.headers.get('Authorization');
  if (authHeader?.startsWith('Bearer ')) {
    return authHeader.substring(7);
  }
  
  return null;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –∏–∑ cookie (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ)
function getUserRole(request: NextRequest): string | null {
  const roleCookie = request.cookies.get('role');
  return roleCookie?.value || null;
}

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –∏–∑ Accept-Language header
function detectLanguageFromHeader(request: NextRequest): string {
  const acceptLanguage = request.headers.get('Accept-Language');
  
  if (!acceptLanguage) {
    return DEFAULT_LOCALE;
  }

  // –ü–∞—Ä—Å–∏–º Accept-Language header (–Ω–∞–ø—Ä–∏–º–µ—Ä: "en-US,en;q=0.9,ru;q=0.8")
  const languages = acceptLanguage
    .split(',')
    .map(lang => {
      const [code, qValue] = lang.trim().split(';');
      const quality = qValue ? parseFloat(qValue.split('=')[1]) : 1.0;
      // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Å–∏–º–≤–æ–ª–∞ (en-US -> en)
      const langCode = code.split('-')[0].toLowerCase();
      return { code: langCode, quality };
    })
    .sort((a, b) => b.quality - a.quality);

  // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫
  for (const lang of languages) {
    if (SUPPORTED_LOCALES.includes(lang.code)) {
      return lang.code;
    }
  }

  return DEFAULT_LOCALE;
}

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  // === 1. LANGUAGE DETECTION ===
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookie —Å —è–∑—ã–∫–æ–º
  let locale = request.cookies.get('NEXT_LOCALE')?.value;
  
  if (!locale || !SUPPORTED_LOCALES.includes(locale)) {
    // –ï—Å–ª–∏ cookie –Ω–µ—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ Accept-Language
    locale = detectLanguageFromHeader(request);
    console.log(`üåç Language detected from Accept-Language: ${locale}`);
  } else {
    console.log(`üåç Language from cookie: ${locale}`);
  }

  // –°–æ–∑–¥–∞—ë–º response —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º cookie —è–∑—ã–∫–∞
  const response = NextResponse.next();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —è–∑—ã–∫–æ–º (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è)
  const currentCookie = request.cookies.get('NEXT_LOCALE')?.value;
  if (currentCookie !== locale) {
    response.cookies.set('NEXT_LOCALE', locale, {
      maxAge: 60 * 60 * 24 * 365, // 1 –≥–æ–¥
      path: '/',
      sameSite: 'lax',
    });
    console.log(`‚úÖ Set NEXT_LOCALE cookie to: ${locale}`);
  }

  // === 2. AUTHENTICATION ===
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç Go API
  const token = getAuthToken(request);
  const role = getUserRole(request);

  console.log(`üõ°Ô∏è Middleware: ${pathname} | Authenticated: ${!!token} | Role: ${role || 'none'}`);

  // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
  const protectedPaths = ["/admin", "/business", "/profile", "/orders"];
  const isProtectedPath = protectedPaths.some(path => pathname.startsWith(path));

  if (isProtectedPath) {
    if (!token) {
      console.log(`‚ùå Unauthorized access to ${pathname}, redirecting to signin`);
      const signInUrl = new URL("/auth/signin", request.url);
      signInUrl.searchParams.set("callbackUrl", pathname);
      return NextResponse.redirect(signInUrl);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º
    if (pathname.startsWith("/admin") && role !== "admin") {
      console.log(`‚ùå Role ${role} attempted to access admin area, redirecting`);
      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∞—à–±–æ—Ä–¥
      if (role === "business_owner") {
        return NextResponse.redirect(new URL("/business/dashboard", request.url));
      }
      return NextResponse.redirect(new URL("/", request.url));
    }

    if (pathname.startsWith("/business") && role !== "business_owner" && role !== "admin") {
      console.log(`‚ùå Role ${role} attempted to access business area, redirecting`);
      return NextResponse.redirect(new URL("/", request.url));
    }
    
    console.log(`‚úÖ Token found, allowing access to ${pathname}`);
  }

  return response;
}

export const config = {
  // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
  matcher: [
    // Auth-–∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    "/admin/:path*", 
    "/business/:path*", 
    "/profile/:path*", 
    "/orders/:path*",
    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    "/((?!api|_next/static|_next/image|favicon.ico).*)",
  ],
};

