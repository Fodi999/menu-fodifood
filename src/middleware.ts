import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞ –æ—Ç Go API
function getAuthToken(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ cookie (–µ–¥–∏–Ω—ã–π –∫–ª—é—á "token")
  const tokenCookie = request.cookies.get('token');
  if (tokenCookie) {
    return tokenCookie.value;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
  const authHeader = request.headers.get('Authorization');
  if (authHeader?.startsWith('Bearer ')) {
    return authHeader.substring(7);
  }
  
  return null;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –∏–∑ cookie (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ)
function getUserRole(request: NextRequest): string | null {
  const roleCookie = request.cookies.get('role');
  return roleCookie?.value || null;
}

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç Go API
  const token = getAuthToken(request);
  const role = getUserRole(request);

  console.log(`üõ°Ô∏è Middleware: ${pathname} | Authenticated: ${!!token} | Role: ${role || 'none'}`);

  // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
  const protectedPaths = ["/admin", "/business", "/profile", "/orders"];
  const isProtectedPath = protectedPaths.some(path => pathname.startsWith(path));

  if (isProtectedPath) {
    if (!token) {
      console.log(`‚ùå Unauthorized access to ${pathname}, redirecting to signin`);
      const signInUrl = new URL("/auth/signin", request.url);
      signInUrl.searchParams.set("callbackUrl", pathname);
      return NextResponse.redirect(signInUrl);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º
    if (pathname.startsWith("/admin") && role !== "admin") {
      console.log(`‚ùå Role ${role} attempted to access admin area, redirecting`);
      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∞—à–±–æ—Ä–¥
      if (role === "business_owner") {
        return NextResponse.redirect(new URL("/business/dashboard", request.url));
      }
      return NextResponse.redirect(new URL("/", request.url));
    }

    if (pathname.startsWith("/business") && role !== "business_owner" && role !== "admin") {
      console.log(`‚ùå Role ${role} attempted to access business area, redirecting`);
      return NextResponse.redirect(new URL("/", request.url));
    }
    
    console.log(`‚úÖ Token found, allowing access to ${pathname}`);
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/admin/:path*", "/business/:path*", "/profile/:path*", "/orders/:path*"],
};

