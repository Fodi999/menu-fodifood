import NextAuth from "next-auth";
import { PrismaAdapter } from "@auth/prisma-adapter";
import CredentialsProvider from "next-auth/providers/credentials";
import { prisma } from "@/lib/prisma";
import bcrypt from "bcryptjs";

export const { handlers, signIn, signOut, auth } = NextAuth({
  adapter: PrismaAdapter(prisma),
  session: {
    strategy: "jwt", // JWT-—Å–µ—Å—Å–∏–∏ - NextAuth —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω–∞–º–∏
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
  pages: {
    signIn: "/auth/signin",
    error: "/auth/error",
  },
  trustHost: true, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Vercel!
  providers: [
    CredentialsProvider({
      name: "credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          console.log('‚ùå Login attempt without credentials');
          return null;
        }

        const user = await prisma.user.findUnique({
          where: { email: credentials.email as string },
        });

        if (!user || !user.password) {
          console.log(`‚ùå User not found: ${credentials.email}`);
          return null;
        }

        const isPasswordValid = await bcrypt.compare(
          credentials.password as string,
          user.password
        );

        if (!isPasswordValid) {
          console.log(`‚ùå Failed login attempt for: ${credentials.email}`);
          return null;
        }

        console.log(`‚úÖ Successful login: ${user.email} (${user.role})`);
        
        return {
          id: user.id,
          email: user.email,
          name: user.name,
          role: user.role,
        };
      },
    }),
  ],
  callbacks: {
    async redirect({ url, baseUrl }) {
      // –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
      console.log(`üîÄ Redirect callback: url=${url}, baseUrl=${baseUrl}`);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –∏ NextAuth —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ /auth/signin - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      if (url === `${baseUrl}/auth/signin` || url === '/auth/signin') {
        console.log(`‚ö†Ô∏è Prevented redirect to signin, using /profile instead`);
        return `${baseUrl}/profile`;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
      if (url.startsWith('/')) {
        return `${baseUrl}${url}`;
      }
      
      // –ï—Å–ª–∏ URL –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞—à–µ–º—É –¥–æ–º–µ–Ω—É, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
      if (url.startsWith(baseUrl)) {
        return url;
      }
      
      // –í–Ω–µ—à–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π URL
      console.log(`‚ö†Ô∏è External redirect blocked: ${url}`);
      return baseUrl;
    },
    async jwt({ token, user }) {
      if (user) {
        token.role = user.role;
        token.id = user.id as string;
        console.log(`üîë JWT created for: ${user.email} (role: ${user.role})`);
      }
      return token;
    },
    async session({ session, token }) {
      if (session.user) {
        session.user.role = token.role as "user" | "admin";
        session.user.id = token.id as string;
        console.log(`üë§ Session loaded for: ${session.user.email} (role: ${session.user.role})`);
      }
      return session;
    },
  },
});
