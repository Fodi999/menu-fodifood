'use client';

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User, UserRole } from '@/types/user';
import api from '@/lib/api';

interface RoleContextType {
  currentRole: UserRole;
  switchRole: (role: UserRole) => Promise<void>;
  canSwitchRole: boolean;
  user: User | null;
}

const RoleContext = createContext<RoleContextType | undefined>(undefined);

interface RoleProviderProps {
  children: ReactNode;
  user: User | null;
}

export function RoleProvider({ children, user }: RoleProviderProps) {
  // –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ localStorage)
  const [currentRole, setCurrentRole] = useState<UserRole>(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('active_role');
      return (saved as UserRole) || user?.role || UserRole.USER;
    }
    return user?.role || UserRole.USER;
  });

  // –ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–æ–ª—è–º–∏?
  // –í—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Ä–æ–ª—å
  const canSwitchRole = !!user;

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–æ–ª—å
  const switchRole = async (role: UserRole) => {
    console.log('üîÑ RoleContext: switchRole called', { role, user: !!user });
    
    if (!user) {
      console.warn('‚ö†Ô∏è RoleContext: User must be authenticated to switch roles');
      return;
    }
    
    console.log('üìù RoleContext: Setting current role to', role);
    setCurrentRole(role);
    
    if (typeof window !== 'undefined') {
      localStorage.setItem('active_role', role);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ cookie –¥–ª—è middleware
      document.cookie = `role=${role}; path=/; max-age=86400; SameSite=Lax`;
      console.log('üíæ RoleContext: Saved to localStorage and cookie:', localStorage.getItem('active_role'));
    }

    // ü¶Ä –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Rust API
    try {
      console.log('ü¶Ä RoleContext: Updating role in database...');
      await api.patch('/user/role', { role });
      console.log('‚úÖ RoleContext: Role updated in database successfully');
    } catch (error) {
      console.error('‚ùå RoleContext: Failed to update role in database:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–æ–ª—å —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–∞
      // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast notification –æ–± –æ—à–∏–±–∫–µ
    }
  };

  // –°–±—Ä–æ—Å —Ä–æ–ª–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (!user) {
      setCurrentRole(UserRole.USER);
      if (typeof window !== 'undefined') {
        localStorage.removeItem('active_role');
      }
    }
  }, [user]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å –Ω–∞ user, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  useEffect(() => {
    if (!user && currentRole !== UserRole.USER) {
      setCurrentRole(UserRole.USER);
      if (typeof window !== 'undefined') {
        localStorage.setItem('active_role', UserRole.USER);
      }
    }
  }, [user, currentRole]);

  return (
    <RoleContext.Provider
      value={{
        currentRole,
        switchRole,
        canSwitchRole,
        user,
      }}
    >
      {children}
    </RoleContext.Provider>
  );
}

export function useRole() {
  const context = useContext(RoleContext);
  if (context === undefined) {
    throw new Error('useRole must be used within a RoleProvider');
  }
  return context;
}
