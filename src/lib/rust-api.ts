// ü¶Ä Rust Gateway API Client - Unified Interface

import type { 
  Business, 
  CreateBusinessDto, 
  UpdateBusinessDto, 
  BusinessFilters,
  Subscription 
} from '@/types/business';
import type { ChatRequest, ChatResponse, Conversation } from '@/types/chat';
import type { BusinessMetrics, AIInsight } from '@/types/metrics';
import { MetricsPeriod } from '@/types/metrics';
import type { User, AuthTokens, LoginDto, SignupDto } from '@/types/user';

const RUST_API_URL = process.env.NEXT_PUBLIC_RUST_API || 'http://127.0.0.1:8000';

// ==================== AUTH HEADER ====================
function getAuthHeader(): HeadersInit {
  const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;
  return token ? { 'Authorization': `Bearer ${token}` } : {};
}

// ==================== FETCH WRAPPER ====================

async function fetchRust<T>(endpoint: string, options?: RequestInit): Promise<T> {
  const response = await fetch(`${RUST_API_URL}${endpoint}`, {
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...getAuthHeader(),
      ...options?.headers,
    },
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(error || `API Error: ${response.status}`);
  }

  return response.json();
}

// ==================== BUSINESSES API ====================

export const businessesApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã (–¥–ª—è –≤–∏—Ç—Ä–∏–Ω—ã)
  getAll: async (filters?: BusinessFilters): Promise<Business[]> => {
    const params = new URLSearchParams();
    if (filters?.category) params.append('category', filters.category);
    if (filters?.city) params.append('city', filters.city);
    if (filters?.search) params.append('search', filters.search);
    if (filters?.is_active !== undefined) params.append('is_active', String(filters.is_active));
    
    const query = params.toString();
    return fetchRust<Business[]>(`/businesses${query ? `?${query}` : ''}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –±–∏–∑–Ω–µ—Å –ø–æ ID
  getById: async (id: string): Promise<Business> => {
    return fetchRust<Business>(`/businesses/${id}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –±–∏–∑–Ω–µ—Å –ø–æ slug
  getBySlug: async (slug: string): Promise<Business> => {
    return fetchRust<Business>(`/businesses/slug/${slug}`);
  },

  // –°–æ–∑–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å
  create: async (data: CreateBusinessDto): Promise<Business> => {
    return fetchRust<Business>('/businesses', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –±–∏–∑–Ω–µ—Å
  update: async (id: string, data: UpdateBusinessDto): Promise<Business> => {
    return fetchRust<Business>(`/businesses/${id}`, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  },

  // –£–¥–∞–ª–∏—Ç—å –±–∏–∑–Ω–µ—Å
  delete: async (id: string): Promise<void> => {
    return fetchRust<void>(`/businesses/${id}`, {
      method: 'DELETE',
    });
  },
};

// ==================== SUBSCRIPTIONS API ====================

export const subscriptionsApi = {
  // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∏–∑–Ω–µ—Å
  subscribe: async (business_id: string): Promise<Subscription> => {
    return fetchRust<Subscription>('/subscriptions', {
      method: 'POST',
      body: JSON.stringify({ business_id }),
    });
  },

  // –û—Ç–ø–∏—Å–∞—Ç—å—Å—è
  unsubscribe: async (subscription_id: string): Promise<void> => {
    return fetchRust<void>(`/subscriptions/${subscription_id}`, {
      method: 'DELETE',
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserSubscriptions: async (): Promise<Subscription[]> => {
    return fetchRust<Subscription[]>('/subscriptions');
  },
};

// ==================== CHAT API ====================

export const chatApi = {
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  sendMessage: async (request: ChatRequest): Promise<ChatResponse> => {
    return fetchRust<ChatResponse>('/chat/message', {
      method: 'POST',
      body: JSON.stringify(request),
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  getSuggestions: async (business_id?: string): Promise<string[]> => {
    const params = business_id ? `?business_id=${business_id}` : '';
    return fetchRust<string[]>(`/chat/suggestions${params}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–µ—Å–µ–¥
  getConversations: async (): Promise<Conversation[]> => {
    return fetchRust<Conversation[]>('/chat/conversations');
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–µ—Å–µ–¥—É
  getConversation: async (id: string): Promise<Conversation> => {
    return fetchRust<Conversation>(`/chat/conversations/${id}`);
  },
};

// ==================== METRICS API (Admin) ====================

export const metricsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –±–∏–∑–Ω–µ—Å–∞
  getMetrics: async (business_id: string, period: MetricsPeriod = MetricsPeriod.MONTH): Promise<BusinessMetrics> => {
    return fetchRust<BusinessMetrics>(`/admin/metrics?business_id=${business_id}&period=${period}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É
  getRevenue: async (business_id: string, period: MetricsPeriod): Promise<BusinessMetrics['revenue']> => {
    return fetchRust(`/admin/metrics/revenue?business_id=${business_id}&period=${period}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
  getOrdersMetrics: async (business_id: string, period: MetricsPeriod): Promise<BusinessMetrics['orders']> => {
    return fetchRust(`/admin/metrics/orders?business_id=${business_id}&period=${period}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é
  getConversion: async (business_id: string, period: MetricsPeriod): Promise<BusinessMetrics['conversion']> => {
    return fetchRust(`/admin/metrics/conversion?business_id=${business_id}&period=${period}`);
  },
};

// ==================== INSIGHTS API ====================

export const insightsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å AI –∏–Ω—Å–∞–π—Ç—ã
  getInsights: async (business_id: string): Promise<AIInsight[]> => {
    return fetchRust<AIInsight[]>(`/insights?business_id=${business_id}`);
  },

  // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
  generateInsights: async (business_id: string): Promise<AIInsight[]> => {
    return fetchRust<AIInsight[]>('/insights/generate', {
      method: 'POST',
      body: JSON.stringify({ business_id }),
    });
  },
};

// ==================== AUTH API ====================

export const authApi = {
  // –í—Ö–æ–¥
  login: async (data: LoginDto): Promise<{ user: User; tokens: AuthTokens }> => {
    return fetchRust('/auth/login', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  signup: async (data: SignupDto): Promise<{ user: User; tokens: AuthTokens }> => {
    return fetchRust('/auth/signup', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser: async (): Promise<User> => {
    return fetchRust('/auth/me');
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
  refreshToken: async (refresh_token: string): Promise<AuthTokens> => {
    return fetchRust('/auth/refresh', {
      method: 'POST',
      body: JSON.stringify({ refresh_token }),
    });
  },
};

// ==================== SIMPLIFIED EXPORTS ====================

/**
 * üè™ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã –¥–ª—è –≤–∏—Ç—Ä–∏–Ω—ã
 */
export async function fetchBusinesses(filters?: BusinessFilters): Promise<Business[]> {
  return businessesApi.getAll(filters);
}

/**
 * üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AI —á–∞—Ç
 */
export async function sendChatMessage(userId: string, message: string, businessId?: string): Promise<any> {
  return fetchRust('/api/v1/chat/message', {
    method: 'POST',
    body: JSON.stringify({
      user_id: userId,
      message,
      business_id: businessId,
    }),
  });
}

/**
 * üìä –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –±–∏–∑–Ω–µ—Å–∞
 */
export async function fetchMetrics(businessId: string, period: MetricsPeriod = MetricsPeriod.MONTH): Promise<BusinessMetrics> {
  return fetchRust<BusinessMetrics>(`/admin/metrics?business_id=${businessId}&period=${period}`);
}

/**
 * üí° –ü–æ–ª—É—á–∏—Ç—å AI –∏–Ω—Å–∞–π—Ç—ã
 */
export async function fetchInsights(businessId: string): Promise<AIInsight[]> {
  return fetchRust<AIInsight[]>(`/api/v1/insights?business=${businessId}`);
}

/**
 * üîÑ Health check
 */
export async function healthCheck(): Promise<{ status: string }> {
  return fetchRust('/health');
}
