/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
 * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
 */

interface ErrorLog {
  timestamp: string;
  message: string;
  stack?: string;
  url: string;
  userAgent: string;
  type: 'error' | 'warning' | 'info';
}

class ErrorLogger {
  private logs: ErrorLog[] = [];
  private maxLogs = 100;

  constructor() {
    if (typeof window !== 'undefined') {
      this.setupGlobalErrorHandler();
      this.setupUnhandledRejectionHandler();
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
   */
  private setupGlobalErrorHandler() {
    window.addEventListener('error', (event) => {
      this.log({
        timestamp: new Date().toISOString(),
        message: event.message,
        stack: event.error?.stack,
        url: window.location.href,
        userAgent: navigator.userAgent,
        type: 'error',
      });
    });
  }

  /**
   * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ Promise rejections
   */
  private setupUnhandledRejectionHandler() {
    window.addEventListener('unhandledrejection', (event) => {
      this.log({
        timestamp: new Date().toISOString(),
        message: `Unhandled Promise Rejection: ${event.reason}`,
        stack: event.reason?.stack,
        url: window.location.href,
        userAgent: navigator.userAgent,
        type: 'error',
      });
    });
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
   */
  private log(error: ErrorLog) {
    this.logs.push(error);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
    if (this.logs.length > this.maxLogs) {
      this.logs.shift();
    }

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.error('üî¥ Error logged:', error);

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    this.sendToServer(error);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  private async sendToServer(error: ErrorLog) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ MCP —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ)
      const mcpServerUrl = process.env.NEXT_PUBLIC_MCP_SERVER_URL || 'http://localhost:3001';
      
      await fetch(`${mcpServerUrl}/api/log`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(error),
      });
      
      console.log('üì§ Log sent to MCP server');
    } catch (err) {
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω
      // console.error('Failed to send error to server:', err);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏
   */
  public getLogs(): ErrorLog[] {
    return [...this.logs];
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
   */
  public clearLogs() {
    this.logs = [];
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ JSON
   */
  public exportLogs(): string {
    return JSON.stringify(this.logs, null, 2);
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ
   */
  public exportAsMarkdown(): string {
    if (this.logs.length === 0) {
      return '# üìä Error Logs\n\n‚úÖ No errors logged yet!';
    }

    let markdown = '# üìä Error Logs\n\n';
    markdown += `**Total Errors:** ${this.logs.length}\n`;
    markdown += `**Generated:** ${new Date().toLocaleString('ru-RU')}\n\n`;
    markdown += '---\n\n';

    this.logs.forEach((log, index) => {
      const emoji = log.type === 'error' ? '‚ùå' : log.type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
      
      markdown += `## ${emoji} Error #${index + 1}\n\n`;
      markdown += `**Time:** ${new Date(log.timestamp).toLocaleString('ru-RU')}\n`;
      markdown += `**Type:** ${log.type}\n`;
      markdown += `**URL:** ${log.url}\n`;
      markdown += `**Message:**\n\`\`\`\n${log.message}\n\`\`\`\n\n`;
      
      if (log.stack) {
        markdown += `**Stack Trace:**\n\`\`\`\n${log.stack}\n\`\`\`\n\n`;
      }
      
      markdown += `**User Agent:** ${log.userAgent}\n\n`;
      markdown += '---\n\n';
    });

    return markdown;
  }

  /**
   * –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∫–∞–∫ Markdown
   */
  public async copyAsMarkdown(): Promise<boolean> {
    try {
      const markdown = this.exportAsMarkdown();
      await navigator.clipboard.writeText(markdown);
      console.log('‚úÖ Logs copied to clipboard as Markdown!');
      return true;
    } catch (error) {
      console.error('‚ùå Failed to copy to clipboard:', error);
      return false;
    }
  }

  /**
   * –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ –∫–∞–∫ —Ñ–∞–π–ª
   */
  public downloadLogs() {
    const data = this.exportLogs();
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `error-logs-${new Date().toISOString()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  /**
   * –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ –∫–∞–∫ Markdown —Ñ–∞–π–ª
   */
  public downloadAsMarkdown() {
    const data = this.exportAsMarkdown();
    const blob = new Blob([data], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `error-logs-${new Date().toISOString()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    console.log('‚úÖ Markdown file downloaded!');
  }

  /**
   * –í—ã–≤–µ—Å—Ç–∏ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  public printMarkdown() {
    const markdown = this.exportAsMarkdown();
    console.log('\n' + '='.repeat(80));
    console.log('üìã COPY THIS MARKDOWN AND PASTE TO COPILOT:');
    console.log('='.repeat(80) + '\n');
    console.log(markdown);
    console.log('\n' + '='.repeat(80));
    console.log('‚úÖ Select and copy the text above');
    console.log('='.repeat(80) + '\n');
  }

  /**
   * –†—É—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  public logError(message: string, details?: any) {
    this.log({
      timestamp: new Date().toISOString(),
      message,
      stack: details?.stack || new Error().stack,
      url: typeof window !== 'undefined' ? window.location.href : '',
      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',
      type: 'error',
    });
  }

  public logWarning(message: string, details?: any) {
    this.log({
      timestamp: new Date().toISOString(),
      message,
      stack: details?.stack,
      url: typeof window !== 'undefined' ? window.location.href : '',
      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',
      type: 'warning',
    });
  }

  public logInfo(message: string, details?: any) {
    this.log({
      timestamp: new Date().toISOString(),
      message,
      stack: details?.stack,
      url: typeof window !== 'undefined' ? window.location.href : '',
      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',
      type: 'info',
    });
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
const errorLogger = typeof window !== 'undefined' ? new ErrorLogger() : null;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default errorLogger;

// –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
  (window as any).errorLogger = errorLogger;
}
