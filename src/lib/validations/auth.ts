// üîê Auth validation schemas using Zod

import { z } from 'zod';

export const signInSchema = z.object({
  email: z
    .string()
    .min(1, 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    .email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  password: z
    .string()
    .min(6, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'),
});

export const signUpSchema = z.object({
  name: z
    .string()
    .min(2, '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')
    .max(50, '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤'),
  email: z
    .string()
    .min(1, 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    .email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  password: z
    .string()
    .min(6, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
    .max(100, '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π'),
  confirmPassword: z
    .string()
    .min(1, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'),
}).refine((data) => data.password === data.confirmPassword, {
  message: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
  path: ['confirmPassword'],
});

export type SignInInput = z.infer<typeof signInSchema>;
export type SignUpInput = z.infer<typeof signUpSchema>;
