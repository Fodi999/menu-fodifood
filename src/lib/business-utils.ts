// üîß –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–∑–Ω–µ—Å–∞–º–∏

import type { Business } from '@/types/business';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL-friendly slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞
 */
export function generateBusinessSlug(business: Business): string {
  if (business.slug && business.slug.trim()) {
    return business.slug;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
  const slug = business.name
    .toLowerCase()
    .trim()
    .replace(/[^a-z–∞-—è0-9\s-]/g, '') // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, '-') // –ü—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
    .replace(/-+/g, '-') // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –≤ –æ–¥–∏–Ω
    .replace(/^-|-$/g, ''); // –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–∏—Å—ã —Å –∫—Ä–∞–µ–≤

  // –ï—Å–ª–∏ slug –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ç–æ–ª—å–∫–æ ASCII, –∏—Å–ø–æ–ª—å–∑—É–µ–º id
  if (!slug || slug.length < 3) {
    return business.id;
  }

  return slug;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –±–∏–∑–Ω–µ—Å–∞
 */
export function getBusinessUrl(business: Business): string {
  return `/business/${business.id}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatBusinessCategory(category: string): string {
  const categoryMap: Record<string, string> = {
    restaurant: '–†–µ—Å—Ç–æ—Ä–∞–Ω',
    cafe: '–ö–∞—Ñ–µ',
    bakery: '–ü–µ–∫–∞—Ä–Ω—è',
    sushi: '–°—É—à–∏',
    pizza: '–ü–∏—Ü—Ü–∞',
    fastfood: '–§–∞—Å—Ç—Ñ—É–¥',
    healthy: '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
    desserts: '–î–µ—Å–µ—Ä—Ç—ã',
    other: '–î—Ä—É–≥–æ–µ',
  };

  return categoryMap[category.toLowerCase()] || category;
}
