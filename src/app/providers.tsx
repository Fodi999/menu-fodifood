"use client";

import { ReactNode, useEffect } from "react";
import { I18nextProvider } from "react-i18next";
import i18n from "@/i18n";

import { AuthProvider, useAuth } from "@/contexts/AuthContext";
import { RoleProvider } from "@/contexts/RoleContext";
import { BusinessProvider } from "@/contexts/BusinessContext";
import { useUIEvents } from "@/hooks/useUIEvents";
import errorLogger from "@/lib/errorLogger";
import { Toaster } from "sonner";

interface ProvidersProps {
  children: ReactNode;
}

/**
 * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ–π ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI Events, Role –∏ Business –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤.
 * –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ.
 */
function ProvidersInner({ children }: { children: ReactNode }) {
  const { user } = useAuth();
  const { isConnected } = useUIEvents();

  useEffect(() => {
    if (isConnected) console.log("‚úÖ UI Events system active");
  }, [isConnected]);

  return (
    <RoleProvider user={user}>
      <BusinessProvider initialBusinessId={user?.business_id}>
        <I18nextProvider i18n={i18n}>
          {children}
          {/* Global Toast System */}
          <Toaster
            position="top-right"
            theme="dark"
            expand
            richColors
            visibleToasts={3}
          />
        </I18nextProvider>
      </BusinessProvider>
    </RoleProvider>
  );
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç Auth, Role, Business, i18n –∏ UI Events
 */
export function Providers({ children }: ProvidersProps) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –æ—à–∏–±–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    if (typeof window !== "undefined" && errorLogger) {
      console.log("‚úÖ Error logger initialized");
      console.log(
        "üí° Tip: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ window.errorLogger.downloadLogs() –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤"
      );
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –≤ window –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      (window as any).errorLogger = errorLogger;
    }
  }, []);

  return (
    <AuthProvider>
      <ProvidersInner>{children}</ProvidersInner>
    </AuthProvider>
  );
}
