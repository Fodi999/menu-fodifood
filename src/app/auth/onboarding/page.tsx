"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/contexts/AuthContext";
import { useBusiness } from "@/contexts/BusinessContext";
import { businessesApi } from "@/lib/rust-api";
import { BusinessCategory } from "@/types/business";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, Store, MapPin, FileText, Upload, CreditCard, CheckCircle2 } from "lucide-react";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "sonner";

export default function OnboardingPage() {
  const router = useRouter();
  const { user, refreshUser } = useAuth();
  const { setCurrentBusiness, refreshBusiness } = useBusiness();
  const [step, setStep] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    city: "",
    category: "",
    description: "",
    logo: null as File | null,
    cover: null as File | null,
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleFileChange = (field: "logo" | "cover", file: File | null) => {
    setFormData(prev => ({ ...prev, [field]: file }));
  };

  const handleNext = () => {
    setStep(prev => prev + 1);
  };

  const handleBack = () => {
    setStep(prev => prev - 1);
  };

  const handleSubmit = async () => {
    setIsLoading(true);
    try {
      console.log("üè™ Creating business:", formData);
      
      // 1. –°–æ–∑–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å —á–µ—Ä–µ–∑ API
      const newBusiness = await businessesApi.create({
        name: formData.name,
        city: formData.city,
        category: formData.category as BusinessCategory,
        description: formData.description,
        // TODO: –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        slug: formData.name.toLowerCase().replace(/\s+/g, '-'),
        address: formData.city, // –í—Ä–µ–º–µ–Ω–Ω–æ
        phone: user?.phone || "",
        email: user?.email || "",
        // TODO: Upload logo and cover images
        logo_url: formData.logo ? URL.createObjectURL(formData.logo) : undefined,
      });
      
      console.log("‚úÖ Business created:", newBusiness);
      
      // 2. –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∏–∑–Ω–µ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      setCurrentBusiness(newBusiness);
      
      // 3. –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª—É—á–∏—Ç—å business_id)
      await refreshUser();
      
      // 4. –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      toast.success(`–†–µ—Å—Ç–æ—Ä–∞–Ω "${newBusiness.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
      
      // 5. –†–µ–¥–∏—Ä–µ–∫—Ç –≤ –±–∏–∑–Ω–µ—Å-–¥–∞—à–±–æ—Ä–¥
      router.push("/business/dashboard");
    } catch (error) {
      console.error("‚ùå Failed to create business:", error);
      toast.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    } finally {
      setIsLoading(false);
    }
  };

  if (!user) {
    return null;
  }

  const steps = [
    { number: 1, title: "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", icon: Store },
    { number: 2, title: "–û–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è", icon: FileText },
    { number: 3, title: "–ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã", icon: Upload },
    { number: 4, title: "–û–ø–ª–∞—Ç–∞", icon: CreditCard },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#090909] via-[#0d0d0d] to-[#1a1a1a] py-12 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Progress Steps */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            {steps.map((s, idx) => {
              const Icon = s.icon;
              const isActive = step === s.number;
              const isCompleted = step > s.number;
              
              return (
                <div key={s.number} className="flex items-center flex-1">
                  <div className={`
                    flex items-center justify-center w-10 h-10 rounded-full border-2 transition-all
                    ${isActive ? 'border-orange-500 bg-orange-500/20 text-orange-400' : ''}
                    ${isCompleted ? 'border-green-500 bg-green-500/20 text-green-400' : ''}
                    ${!isActive && !isCompleted ? 'border-gray-700 bg-gray-800/50 text-gray-500' : ''}
                  `}>
                    {isCompleted ? <CheckCircle2 className="w-5 h-5" /> : <Icon className="w-5 h-5" />}
                  </div>
                  {idx < steps.length - 1 && (
                    <div className={`flex-1 h-0.5 mx-2 ${isCompleted ? 'bg-green-500' : 'bg-gray-800'}`} />
                  )}
                </div>
              );
            })}
          </div>
          <div className="flex justify-between text-xs text-gray-400">
            {steps.map(s => (
              <div key={s.number} className="flex-1 text-center">
                {s.title}
              </div>
            ))}
          </div>
        </div>

        {/* Main Card */}
        <Card className="bg-gradient-to-br from-[#1a1a1a] to-[#0a0a0a] border-gray-800/50">
          <CardHeader>
            <CardTitle className="text-2xl text-white">
              {steps[step - 1].title}
            </CardTitle>
            <CardDescription className="text-gray-400">
              {step === 1 && "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ"}
              {step === 2 && "–î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"}
              {step === 3 && "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∏ –æ–±–ª–æ–∂–∫—É"}
              {step === 4 && "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–ø–ª–∞—Ç–æ–π"}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Step 1: Basic Info */}
            {step === 1 && (
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="name" className="text-gray-300">
                    –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
                  </Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => handleInputChange("name", e.target.value)}
                    placeholder="FODI SUSHI"
                    className="bg-[#0f0f0f] border-gray-800 text-white"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="city" className="text-gray-300 flex items-center gap-2">
                    <MapPin className="w-4 h-4" />
                    –ì–æ—Ä–æ–¥
                  </Label>
                  <Input
                    id="city"
                    value={formData.city}
                    onChange={(e) => handleInputChange("city", e.target.value)}
                    placeholder="–ú–æ—Å–∫–≤–∞"
                    className="bg-[#0f0f0f] border-gray-800 text-white"
                  />
                </div>
              </div>
            )}

            {/* Step 2: Description & Category */}
            {step === 2 && (
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="category" className="text-gray-300">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                  </Label>
                  <Input
                    id="category"
                    value={formData.category}
                    onChange={(e) => handleInputChange("category", e.target.value)}
                    placeholder="–°—É—à–∏, –ü–∏—Ü—Ü–∞, –ö–æ—Ñ–µ..."
                    className="bg-[#0f0f0f] border-gray-800 text-white"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description" className="text-gray-300">
                    –û–ø–∏—Å–∞–Ω–∏–µ
                  </Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => handleInputChange("description", e.target.value)}
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ, –º–µ–Ω—é, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö..."
                    className="bg-[#0f0f0f] border-gray-800 text-white min-h-32"
                  />
                </div>
              </div>
            )}

            {/* Step 3: Media Files */}
            {step === 3 && (
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="logo" className="text-gray-300">
                    –õ–æ–≥–æ—Ç–∏–ø
                  </Label>
                  <div className="flex items-center gap-4">
                    <Input
                      id="logo"
                      type="file"
                      accept="image/*"
                      onChange={(e) => handleFileChange("logo", e.target.files?.[0] || null)}
                      className="bg-[#0f0f0f] border-gray-800 text-white"
                    />
                    {formData.logo && (
                      <span className="text-green-400 text-sm">‚úì –í—ã–±—Ä–∞–Ω–æ</span>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="cover" className="text-gray-300">
                    –û–±–ª–æ–∂–∫–∞
                  </Label>
                  <div className="flex items-center gap-4">
                    <Input
                      id="cover"
                      type="file"
                      accept="image/*"
                      onChange={(e) => handleFileChange("cover", e.target.files?.[0] || null)}
                      className="bg-[#0f0f0f] border-gray-800 text-white"
                    />
                    {formData.cover && (
                      <span className="text-green-400 text-sm">‚úì –í—ã–±—Ä–∞–Ω–æ</span>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Step 4: Payment */}
            {step === 4 && (
              <div className="space-y-6">
                <div className="bg-gradient-to-br from-orange-500/20 to-yellow-500/20 border border-orange-500/30 rounded-lg p-6">
                  <div className="text-center mb-6">
                    <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-gradient-to-br from-orange-500 to-yellow-500 mb-4">
                      <Store className="w-8 h-8 text-white" />
                    </div>
                    <h3 className="text-xl font-bold text-white mb-2">
                      –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–∑–Ω–æ—Å
                    </h3>
                    <p className="text-gray-400 text-sm">
                      –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞
                    </p>
                  </div>

                  <div className="bg-[#0f0f0f] rounded-lg p-4 mb-6">
                    <div className="flex justify-between items-center">
                      <span className="text-gray-400">–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</span>
                      <span className="text-3xl font-bold bg-gradient-to-r from-orange-400 to-yellow-400 bg-clip-text text-transparent">
                        $19
                      </span>
                    </div>
                  </div>

                  <ul className="space-y-3 text-sm text-gray-300 mb-6">
                    <li className="flex items-center gap-2">
                      <CheckCircle2 className="w-5 h-5 text-green-400 flex-shrink-0" />
                      –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
                    </li>
                    <li className="flex items-center gap-2">
                      <CheckCircle2 className="w-5 h-5 text-green-400 flex-shrink-0" />
                      –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –∏ –∑–∞–∫–∞–∑–∞–º–∏
                    </li>
                    <li className="flex items-center gap-2">
                      <CheckCircle2 className="w-5 h-5 text-green-400 flex-shrink-0" />
                      –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
                    </li>
                    <li className="flex items-center gap-2">
                      <CheckCircle2 className="w-5 h-5 text-green-400 flex-shrink-0" />
                      –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
                    </li>
                  </ul>
                </div>

                <p className="text-xs text-gray-500 text-center">
                  –ù–∞–∂–∏–º–∞—è "–û–ø–ª–∞—Ç–∏—Ç—å", –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã Stripe
                </p>
              </div>
            )}

            {/* Navigation Buttons */}
            <div className="flex justify-between pt-4">
              {step > 1 && (
                <Button
                  onClick={handleBack}
                  variant="outline"
                  className="border-gray-800 hover:bg-gray-800/50"
                >
                  –ù–∞–∑–∞–¥
                </Button>
              )}
              
              <div className="ml-auto flex gap-3">
                {step < 4 ? (
                  <Button
                    onClick={handleNext}
                    className="bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-400 hover:to-orange-500"
                  >
                    –î–∞–ª–µ–µ
                  </Button>
                ) : (
                  <Button
                    onClick={handleSubmit}
                    disabled={isLoading}
                    className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-400 hover:to-green-500"
                  >
                    {isLoading ? (
                      <>
                        <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                        –û–±—Ä–∞–±–æ—Ç–∫–∞...
                      </>
                    ) : (
                      <>
                        <CreditCard className="w-5 h-5 mr-2" />
                        –û–ø–ª–∞—Ç–∏—Ç—å $19
                      </>
                    )}
                  </Button>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
