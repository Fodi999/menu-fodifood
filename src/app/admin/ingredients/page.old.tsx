"use client";

import React, { useEffect, useState, Fragment, useCallback } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/contexts/AuthContext";
import Link from "next/link";
import { ArrowLeft, Plus, Edit2, Trash2, Loader2, Package2 } from "lucide-react";

type Ingredient = {
  id: string;
  name: string;
  unit: string; // "g" | "ml" | "pcs"
  batchNumber?: string | null;
  category?: string | null;
  supplier?: string | null;
  bruttoWeight?: number | null;
  nettoWeight?: number | null;
  wastePercentage?: number | null;
  expiryDays?: number | null;
  priceBrutto?: number | null;
  priceNetto?: number | null;
  createdAt: string;
  updatedAt: string;
  movementsCount?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
};

type GroupedIngredient = {
  name: string;
  unit: string;
  batches: Ingredient[]; // –í—Å–µ –ø–∞—Ä—Ç–∏–∏ —ç—Ç–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
};

type StockMovement = {
  id: string;
  ingredientId: string;
  quantity: number;
  type: string; // "addition" | "removal" | "adjustment"
  notes?: string;
  createdAt: string;
};

type IngredientFormData = {
  name: string;
  unit: string;
  category: string;
  supplier: string;
  bruttoWeight: string;
  nettoWeight: string;
  wastePercentage: string;
  expiryDays: string;
  priceBrutto: string;
  priceNetto: string;
};

export default function AdminIngredientsPage() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();
  const [ingredients, setIngredients] = useState<Ingredient[]>([]);
  const [groupedIngredients, setGroupedIngredients] = useState<GroupedIngredient[]>([]);
  const [expandedGroups, setExpandedGroups] = useState<Set<string>>(new Set());
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [showForm, setShowForm] = useState(false);
  const [editingIngredient, setEditingIngredient] = useState<Ingredient | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [showSearchResults, setShowSearchResults] = useState(false);
  const [selectedIngredientMovements, setSelectedIngredientMovements] = useState<{
    ingredientId: string;
    ingredientName: string;
    batchNumber: string;
    movements: StockMovement[];
  } | null>(null);
  const [showMovementsModal, setShowMovementsModal] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string>("all"); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
  const [formData, setFormData] = useState<IngredientFormData>({
    name: "",
    unit: "g",
    category: "",
    supplier: "",
    bruttoWeight: "",
    nettoWeight: "",
    wastePercentage: "",
    expiryDays: "7",
    priceBrutto: "",
    priceNetto: "",
  });

  const units = [
    { value: "g", label: "–ì—Ä–∞–º–º—ã (–≥)" },
    { value: "ml", label: "–ú–∏–ª–ª–∏–ª–∏—Ç—Ä—ã (–º–ª)" },
    { value: "pcs", label: "–®—Ç—É–∫–∏ (—à—Ç)" },
  ];

  const categories = [
    { value: "fish", label: "üêü –†—ã–±–∞" },
    { value: "seafood", label: "ü¶ê –ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã" },
    { value: "vegetables", label: "ü•¨ –û–≤–æ—â–∏" },
    { value: "rice", label: "üçö –†–∏—Å" },
    { value: "nori", label: "üåø –ù–æ—Ä–∏ –∏ –≤–æ–¥–æ—Ä–æ—Å–ª–∏" },
    { value: "sauces", label: "ü•´ –°–æ—É—Å—ã" },
    { value: "spices", label: "üßÇ –°–ø–µ—Ü–∏–∏" },
    { value: "cheese", label: "üßÄ –°—ã—Ä" },
    { value: "other", label: "üì¶ –ü—Ä–æ—á–µ–µ" },
  ];

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ - –∑–∞–º–µ–Ω–∞ –∑–∞–ø—è—Ç–æ–π –Ω–∞ —Ç–æ—á–∫—É
  const normalizeNumberInput = (value: string): string => {
    // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    return value.replace(',', '.');
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
  const formatNumber = (value: string, decimals: number = 3): string => {
    if (!value) return '';
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥ (–∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É)
    const normalized = normalizeNumberInput(value);
    const num = parseFloat(normalized);
    
    if (isNaN(num)) return '';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return num.toFixed(decimals);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç—Ö–æ–¥–∞ –∏–ª–∏ –Ω–µ—Ç—Ç–æ
  const calculateWaste = (brutto: string, netto: string, wastePercent: string, field: 'netto' | 'waste') => {
    const bruttoNum = parseFloat(normalizeNumberInput(brutto));
    const nettoNum = parseFloat(normalizeNumberInput(netto));
    const wasteNum = parseFloat(normalizeNumberInput(wastePercent));

    if (field === 'netto' && bruttoNum > 0 && wasteNum >= 0 && wasteNum <= 100) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ—Ç—Ç–æ: –Ω–µ—Ç—Ç–æ = –±—Ä—É—Ç—Ç–æ - (–±—Ä—É—Ç—Ç–æ * –æ—Ç—Ö–æ–¥%)
      const calculatedNetto = bruttoNum - (bruttoNum * wasteNum / 100);
      return calculatedNetto.toFixed(3);
    } else if (field === 'waste' && bruttoNum > 0 && nettoNum > 0 && nettoNum <= bruttoNum) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–∞: –æ—Ç—Ö–æ–¥% = ((–±—Ä—É—Ç—Ç–æ - –Ω–µ—Ç—Ç–æ) / –±—Ä—É—Ç—Ç–æ) * 100
      const calculatedWaste = ((bruttoNum - nettoNum) / bruttoNum) * 100;
      return calculatedWaste.toFixed(2);
    }
    return '';
  };

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
  const getExpiryDate = (days: string): string => {
    if (!days || parseInt(days) <= 0) return '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    
    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + parseInt(days));
    
    return expiryDate.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã—Ö–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
  const getYieldPercent = (brutto: string, netto: string): number => {
    const bruttoNum = parseFloat(brutto);
    const nettoNum = parseFloat(netto);
    
    if (bruttoNum > 0 && nettoNum > 0) {
      return (nettoNum / bruttoNum) * 100;
    }
    return 0;
  };

  useEffect(() => {
    if (!authLoading && (!user || user.role !== "admin")) {
      router.push("/auth/signin?callbackUrl=/admin/ingredients");
    }
  }, [user, authLoading, router]);

  const fetchIngredients = useCallback(async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem("token");
      const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080";
      
      console.log('Fetching ingredients from:', `${apiUrl}/api/admin/ingredients`);
      console.log('Token:', token ? 'present' : 'missing');
      
      const response = await fetch(
        `${apiUrl}/api/admin/ingredients`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      console.log('Response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Error response:', errorText);
        throw new Error(`Failed to fetch ingredients: ${response.status} ${errorText}`);
      }

      const data = await response.json();
      console.log('Fetched data:', data);
      
      // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É StockItem —Å ingredient –≤–Ω—É—Ç—Ä–∏
      const ingredientsPromises = Array.isArray(data)
        ? data.map(async (item) => {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
            let movementsCount = 0;
            try {
              const movementsResponse = await fetch(
                `${process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080"}/api/admin/ingredients/${item.id}/movements`,
                {
                  headers: { Authorization: `Bearer ${token}` },
                }
              );
              if (movementsResponse.ok) {
                const movements = await movementsResponse.json();
                movementsCount = Array.isArray(movements) ? movements.length : 0;
              }
            } catch (err) {
              console.error(`Failed to fetch movements for ingredient ${item.id}:`, err);
            }

            return {
              id: item.id,
              name: item.ingredient?.name?.trim() || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
              unit: item.ingredient?.unit || "g",
              batchNumber: item.batchNumber?.trim() || null,
              category: item.category?.trim() || null,
              supplier: item.supplier?.trim() || null,
              bruttoWeight: typeof item.bruttoWeight === 'number' ? item.bruttoWeight : null,
              nettoWeight: typeof item.nettoWeight === 'number' ? item.nettoWeight : null,
              wastePercentage: typeof item.wastePercentage === 'number' ? item.wastePercentage : null,
              expiryDays: typeof item.expiryDays === 'number' ? item.expiryDays : null,
              priceBrutto: typeof item.priceBrutto === 'number' ? item.priceBrutto : null,
              priceNetto: typeof item.priceNetto === 'number' ? item.priceNetto : null,
              createdAt: item.ingredient?.createdAt || item.updatedAt,
              updatedAt: item.updatedAt,
              movementsCount,
            };
          })
        : [];
      
      const ingredients = await Promise.all(ingredientsPromises);
      setIngredients(ingredients);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const grouped = groupIngredientsByName(ingredients);
      setGroupedIngredients(grouped);
    } catch (err) {
      console.error("Error fetching ingredients:", err);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã");
      setIngredients([]);
      setGroupedIngredients([]);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    if (user && user.role === "admin") {
      fetchIngredients();
    }
  }, [user, fetchIngredients]);

  // –§—É–Ω–∫—Ü–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  const groupIngredientsByName = (ingredients: Ingredient[]): GroupedIngredient[] => {
    const groups = new Map<string, Ingredient[]>();
    
    ingredients.forEach(ingredient => {
      const key = ingredient.name.toLowerCase().trim();
      if (!groups.has(key)) {
        groups.set(key, []);
      }
      groups.get(key)!.push(ingredient);
    });
    
    return Array.from(groups.entries()).map(([, batches]) => ({
      name: batches[0].name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—Ç–∏–∏
      unit: batches[0].unit,
      batches: batches.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
    }));
  };

  const toggleGroup = (name: string) => {
    const newExpanded = new Set(expandedGroups);
    if (newExpanded.has(name)) {
      newExpanded.delete(name);
    } else {
      newExpanded.add(name);
    }
    setExpandedGroups(newExpanded);
  };

  const fetchMovements = async (ingredientId: string, ingredientName: string, batchNumber: string = "N/A") => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080"}/api/admin/ingredients/${ingredientId}/movements`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (!response.ok) {
        throw new Error("Failed to fetch movements");
      }

      const movements = await response.json();
      setSelectedIngredientMovements({
        ingredientId,
        ingredientName,
        batchNumber,
        movements: Array.isArray(movements) ? movements : [],
      });
      setShowMovementsModal(true);
    } catch (err) {
      console.error("Error fetching movements:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π");
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      const token = localStorage.getItem("token");
      const url = editingIngredient
        ? `${process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080"}/api/admin/ingredients/${editingIngredient.id}`
        : `${process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080"}/api/admin/ingredients`;
      
      const method = editingIngredient ? "PUT" : "POST";

      const response = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          name: formData.name,
          unit: formData.unit,
          quantity: 0, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å backend
          category: formData.category || null,
          supplier: formData.supplier || null,
          bruttoWeight: formData.bruttoWeight ? parseFloat(normalizeNumberInput(formData.bruttoWeight)) : null,
          nettoWeight: formData.nettoWeight ? parseFloat(normalizeNumberInput(formData.nettoWeight)) : null,
          wastePercentage: formData.wastePercentage ? parseFloat(normalizeNumberInput(formData.wastePercentage)) : null,
          expiryDays: formData.expiryDays ? parseInt(formData.expiryDays) : null,
          priceBrutto: formData.priceBrutto ? parseFloat(normalizeNumberInput(formData.priceBrutto)) : null,
          priceNetto: formData.priceNetto ? parseFloat(normalizeNumberInput(formData.priceNetto)) : null,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to save ingredient");
      }

      await response.json();
      await fetchIngredients();
      
      setShowForm(false);
      setEditingIngredient(null);
      setSearchQuery("");
      setShowSearchResults(false);
      setFormData({
        name: "",
        unit: "g",
        category: "",
        supplier: "",
        bruttoWeight: "",
        nettoWeight: "",
        wastePercentage: "",
        expiryDays: "7",
        priceBrutto: "",
        priceNetto: "",
      });

      alert(editingIngredient ? "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!" : "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!");
    } catch (err) {
      console.error("Error saving ingredient:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç");
    }
  };

  const handleEdit = (ingredient: Ingredient) => {
    setEditingIngredient(ingredient);
    setFormData({
      name: ingredient.name,
      unit: ingredient.unit,
      category: ingredient.category || "",
      supplier: ingredient.supplier || "",
      bruttoWeight: ingredient.bruttoWeight?.toString() || "",
      nettoWeight: ingredient.nettoWeight?.toString() || "",
      wastePercentage: ingredient.wastePercentage?.toString() || "",
      expiryDays: ingredient.expiryDays?.toString() || "7",
      priceBrutto: ingredient.priceBrutto?.toString() || "",
      priceNetto: ingredient.priceNetto?.toString() || "",
    });
    setShowForm(true);
    setSearchQuery("");
    setShowSearchResults(false);
  };

  const handleSelectIngredient = (ingredient: Ingredient) => {
    // –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
    // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º editingIngredient, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ù–û–í–£–Æ –ø–∞—Ä—Ç–∏—é, –∞ –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    setEditingIngredient(null);
    setFormData({
      name: ingredient.name,
      unit: ingredient.unit,
      category: ingredient.category || "",
      supplier: ingredient.supplier || "",
      // –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      bruttoWeight: "",
      nettoWeight: "",
      wastePercentage: ingredient.wastePercentage?.toString() || "",
      expiryDays: "7",
      priceBrutto: "",
      priceNetto: "",
    });
    setShowForm(true);
    setSearchQuery("");
    setShowSearchResults(false);
  };

  const handleDelete = async (ingredientId: string, ingredientName: string) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç "${ingredientName}"?`)) {
      return;
    }

    try {
      const token = localStorage.getItem("token");
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080"}/api/admin/ingredients/${ingredientId}`,
        {
          method: "DELETE",
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (!response.ok) {
        throw new Error("Failed to delete ingredient");
      }

      setIngredients(ingredients.filter((i) => i.id !== ingredientId));
      alert(`–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç "${ingredientName}" —É–¥–∞–ª—ë–Ω`);
    } catch (err) {
      console.error("Error deleting ingredient:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç");
    }
  };

  const handleCancel = () => {
    setShowForm(false);
    setEditingIngredient(null);
    setSearchQuery("");
    setShowSearchResults(false);
    setFormData({
      name: "",
      unit: "g",
      category: "",
      supplier: "",
      bruttoWeight: "",
      nettoWeight: "",
      wastePercentage: "",
      expiryDays: "7",
      priceBrutto: "",
      priceNetto: "",
    });
  };

  // –°—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
  const getExpiryStatus = (expiryDays: number | null | undefined) => {
    if (!expiryDays) {
      return { color: "text-gray-400", bg: "bg-gray-500/20", label: "–ù–µ —É–∫–∞–∑–∞–Ω" };
    }
    if (expiryDays <= 3) {
      return { color: "text-red-500", bg: "bg-red-500/20", label: "–°—Ä–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å" };
    } else if (expiryDays <= 7) {
      return { color: "text-yellow-500", bg: "bg-yellow-500/20", label: "–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç" };
    } else {
      return { color: "text-green-500", bg: "bg-green-500/20", label: "–°–≤–µ–∂–∏–π" };
    }
  };

  const getUnitLabel = (unit: string) => {
    const unitObj = units.find((u) => u.value === unit);
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ì—Ä–∞–º–º—ã (–≥)" -> "–≥"
    const match = unitObj?.label.match(/\((.*?)\)/);
    return match ? match[1] : unit;
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredIngredients = ingredients.filter((ing) =>
    ing.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    (ing.category && ing.category.toLowerCase().includes(searchQuery.toLowerCase())) ||
    (ing.supplier && ing.supplier.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  // –ü–æ–¥—Å—á—ë—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const getCategoryCount = (categoryValue: string) => {
    if (categoryValue === "all") return ingredients.length;
    return ingredients.filter(ing => ing.category === categoryValue).length;
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const displayedIngredients = selectedCategory === "all" 
    ? groupedIngredients 
    : groupedIngredients.filter(group => 
        group.batches.some(batch => batch.category === selectedCategory)
      );

  if (authLoading || loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <Loader2 className="w-12 h-12 text-orange-500 animate-spin" />
      </div>
    );
  }

  if (!user || user.role !== "admin") {
    return null;
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white py-20">
      <div className="max-w-7xl mx-auto px-6">
        <div className="flex justify-between items-center mb-8">
          <div className="flex items-center gap-3">
            <Package2 className="w-8 h-8 text-orange-500" />
            <h1 className="text-4xl font-bold text-orange-500">–°–∫–ª–∞–¥ —Å—ã—Ä—å—è</h1>
          </div>
          <div className="flex gap-3">
            <button
              onClick={() => setShowForm(!showForm)}
              className="flex items-center gap-2 px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition"
            >
              <Plus className="w-4 h-4" />
              –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
            </button>
            <Link
              href="/admin"
              className="flex items-center gap-2 px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition"
            >
              <ArrowLeft className="w-4 h-4" />
              –ù–∞–∑–∞–¥
            </Link>
          </div>
        </div>

        {error && (
          <div className="bg-red-500/10 border border-red-500 text-red-500 px-4 py-3 rounded mb-6">
            {error}
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        {!showForm && (
          <div className="mb-6 bg-gray-800 rounded-lg shadow-xl p-4">
            <div className="flex items-center gap-2 overflow-x-auto pb-2">
              <button
                onClick={() => setSelectedCategory("all")}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition whitespace-nowrap ${
                  selectedCategory === "all"
                    ? "bg-orange-500 text-white"
                    : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                }`}
              >
                <span>üì¶ –í—Å–µ</span>
                <span className="px-2 py-0.5 bg-white/20 rounded-full text-xs font-bold">
                  {getCategoryCount("all")}
                </span>
              </button>
              
              {categories.map((cat) => {
                const count = getCategoryCount(cat.value);
                if (count === 0) return null; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                
                return (
                  <button
                    key={cat.value}
                    onClick={() => setSelectedCategory(cat.value)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition whitespace-nowrap ${
                      selectedCategory === cat.value
                        ? "bg-orange-500 text-white"
                        : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                    }`}
                  >
                    <span>{cat.label}</span>
                    <span className="px-2 py-0.5 bg-white/20 rounded-full text-xs font-bold">
                      {count}
                    </span>
                  </button>
                );
              })}
            </div>
          </div>
        )}

        {/* –§–æ—Ä–º–∞ */}
        {showForm && (
          <div className="bg-gray-800 rounded-lg shadow-xl p-6 mb-6">
            <h2 className="text-2xl font-bold mb-4">
              {editingIngredient ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç" : "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"}
            </h2>
            
            {/* –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ */}
            {!editingIngredient && (
              <div className="mb-6 relative">
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                  <h3 className="text-sm font-semibold text-blue-400 mb-3 flex items-center gap-2">
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                    –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏
                  </h3>
                  <p className="text-xs text-gray-400 mb-3">–ù–∞–π–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–µ–º—É –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</p>
                  <input
                    type="text"
                    value={searchQuery}
                    onChange={(e) => {
                      setSearchQuery(e.target.value);
                      setShowSearchResults(e.target.value.length > 0);
                    }}
                    onFocus={() => setShowSearchResults(searchQuery.length > 0)}
                    className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-blue-500"
                    placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É..."
                  />
                  
                  {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
                  {showSearchResults && filteredIngredients.length > 0 && (
                    <div className="absolute z-10 w-full mt-2 bg-gray-800 border border-gray-600 rounded-lg shadow-xl max-h-64 overflow-y-auto">
                      {filteredIngredients.slice(0, 5).map((ing) => (
                        <button
                          key={ing.id}
                          type="button"
                          onClick={() => handleSelectIngredient(ing)}
                          className="w-full px-4 py-3 text-left hover:bg-gray-700 transition border-b border-gray-700 last:border-0"
                        >
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="font-medium text-white">{ing.name}</p>
                              <p className="text-xs text-gray-400">
                                {ing.category && `üì¶ ${ing.category}`}
                                {ing.supplier && ` | üè™ ${ing.supplier}`}
                                {ing.bruttoWeight && ` | ‚öñÔ∏è ${ing.bruttoWeight}${getUnitLabel(ing.unit)}`}
                              </p>
                            </div>
                            <div className="text-xs text-orange-400">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é</div>
                          </div>
                        </button>
                      ))}
                    </div>
                  )}
                  
                  {showSearchResults && searchQuery && filteredIngredients.length === 0 && (
                    <div className="absolute z-10 w-full mt-2 bg-gray-800 border border-gray-600 rounded-lg shadow-xl p-4 text-center text-gray-400">
                      –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–∏–∂–µ.
                    </div>
                  )}
                </div>
              </div>
            )}
            
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ *</label>
                  <input
                    type="text"
                    required
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-orange-500"
                    placeholder="–õ–æ—Å–æ—Å—å"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è *</label>
                  <select
                    required
                    value={formData.unit}
                    onChange={(e) => setFormData({ ...formData, unit: e.target.value })}
                    className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-orange-500"
                  >
                    {units.map((unit) => (
                      <option key={unit.value} value={unit.value}>
                        {unit.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                  <select
                    value={formData.category}
                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                    className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-orange-500"
                  >
                    <option value="">–ù–µ –≤—ã–±—Ä–∞–Ω–∞</option>
                    {categories.map((cat) => (
                      <option key={cat.value} value={cat.value}>
                        {cat.label}
                      </option>
                    ))}
                  </select>
                  <p className="text-xs text-gray-400 mt-1">–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">–ü–æ—Å—Ç–∞–≤—â–∏–∫</label>
                  <input
                    type="text"
                    value={formData.supplier}
                    onChange={(e) => setFormData({ ...formData, supplier: e.target.value })}
                    className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-orange-500"
                    placeholder="–û–û–û –†—ã–±–Ω—ã–π –î–≤–æ—Ä"
                  />
                </div>
              </div>

              {/* –°–µ–∫—Ü–∏—è —É—á—ë—Ç–∞ –æ—Ç—Ö–æ–¥–æ–≤ */}
              <div className="border-t border-gray-700 pt-4 mt-4">
                <h3 className="text-lg font-semibold mb-2 text-orange-400">üìä –£—á—ë—Ç –æ—Ç—Ö–æ–¥–æ–≤ (–ë—Ä—É—Ç—Ç–æ/–ù–µ—Ç—Ç–æ)</h3>
                <p className="text-xs text-gray-400 mb-4">
                  üí° –í–≤–µ–¥–∏—Ç–µ –±—Ä—É—Ç—Ç–æ –∏ –ª–∏–±–æ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–∞, –ª–∏–±–æ –Ω–µ—Ç—Ç–æ ‚Äî –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                </p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">
                      –í–µ—Å –±—Ä—É—Ç—Ç–æ ({getUnitLabel(formData.unit)})
                    </label>
                    <input
                      type="text"
                      inputMode="decimal"
                      value={formData.bruttoWeight}
                      onChange={(e) => {
                        const value = e.target.value;
                        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫—É –∏ –∑–∞–ø—è—Ç—É—é
                        if (value === '' || /^[0-9]+([.,][0-9]*)?$/.test(value)) {
                          setFormData({ ...formData, bruttoWeight: value });
                          // –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—á—ë—Ç –Ω–µ—Ç—Ç–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–∞
                          if (formData.wastePercentage && value) {
                            const calculatedNetto = calculateWaste(value, formData.nettoWeight, formData.wastePercentage, 'netto');
                            if (calculatedNetto) {
                              setFormData(prev => ({ ...prev, bruttoWeight: value, nettoWeight: calculatedNetto }));
                            }
                          }
                        }
                      }}
                      onBlur={(e) => {
                        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
                        if (e.target.value) {
                          const formatted = formatNumber(e.target.value, 3);
                          setFormData(prev => ({ ...prev, bruttoWeight: formatted }));
                        }
                      }}
                      className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-orange-500"
                      placeholder="3,650 –∏–ª–∏ 3.650"
                    />
                    <p className="text-xs text-gray-400 mt-1">–í–µ—Å —Å –æ—Ç—Ö–æ–¥–∞–º–∏ (–º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ç–æ—á–∫—É)</p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">
                      –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–∞ (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      min="0"
                      max="100"
                      value={formData.wastePercentage}
                      onChange={(e) => {
                        const newWaste = e.target.value;
                        setFormData({ ...formData, wastePercentage: newWaste });
                        // –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—á—ë—Ç –Ω–µ—Ç—Ç–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –±—Ä—É—Ç—Ç–æ
                        if (formData.bruttoWeight) {
                          const calculatedNetto = calculateWaste(formData.bruttoWeight, formData.nettoWeight, newWaste, 'netto');
                          if (calculatedNetto) {
                            setFormData(prev => ({ ...prev, wastePercentage: newWaste, nettoWeight: calculatedNetto }));
                          }
                        }
                      }}
                      onBlur={(e) => {
                        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
                        if (e.target.value) {
                          const formatted = parseFloat(e.target.value).toFixed(1);
                          setFormData(prev => ({ ...prev, wastePercentage: formatted }));
                        }
                      }}
                      className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-orange-500"
                      placeholder="15.0"
                    />
                    <p className="text-xs text-gray-400 mt-1">% –ø–æ—Ç–µ—Ä—å –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ (0-100%)</p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">
                      –í–µ—Å –Ω–µ—Ç—Ç–æ ({getUnitLabel(formData.unit)})
                    </label>
                    <input
                      type="text"
                      inputMode="decimal"
                      value={formData.nettoWeight}
                      onChange={(e) => {
                        const value = e.target.value;
                        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫—É –∏ –∑–∞–ø—è—Ç—É—é
                        if (value === '' || /^[0-9]+([.,][0-9]*)?$/.test(value)) {
                          setFormData({ ...formData, nettoWeight: value });
                          // –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç—Ö–æ–¥–∞ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –±—Ä—É—Ç—Ç–æ
                          if (formData.bruttoWeight && value) {
                            const calculatedWaste = calculateWaste(formData.bruttoWeight, value, formData.wastePercentage, 'waste');
                            if (calculatedWaste) {
                              setFormData(prev => ({ ...prev, nettoWeight: value, wastePercentage: calculatedWaste }));
                            }
                          }
                        }
                      }}
                      onBlur={(e) => {
                        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
                        if (e.target.value) {
                          const formatted = formatNumber(e.target.value, 3);
                          setFormData(prev => ({ ...prev, nettoWeight: formatted }));
                        }
                      }}
                      className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-orange-500"
                      placeholder="0,560 –∏–ª–∏ 24.567"
                    />
                    <p className="text-xs text-gray-400 mt-1">–ß–∏—Å—Ç—ã–π –≤–µ—Å –±–µ–∑ –æ—Ç—Ö–æ–¥–æ–≤ (–º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ç–æ—á–∫—É)</p>
                  </div>
                </div>

                {formData.bruttoWeight && formData.nettoWeight && (
                  <div className="mt-3 p-3 bg-green-500/10 border border-green-500/30 rounded-lg">
                    <p className="text-sm text-green-400">
                      ‚úÖ –í—ã—Ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞: <span className="font-bold">
                        {getYieldPercent(formData.bruttoWeight, formData.nettoWeight).toFixed(1)}%
                      </span> | 
                      üóëÔ∏è –ü–æ—Ç–µ—Ä–∏: <span className="font-bold">
                        {formData.wastePercentage || '0'}%
                      </span> | 
                      üì¶ –ß–∏—Å—Ç—ã–π –≤–µ—Å: <span className="font-bold">
                        {parseFloat(formData.nettoWeight).toFixed(2)} {getUnitLabel(formData.unit)}
                      </span>
                    </p>
                  </div>
                )}
              </div>

              {/* –°–µ–∫—Ü–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ */}
              <div className="border-t border-gray-700 pt-4">
                <h3 className="text-lg font-semibold mb-4 text-orange-400">üìÖ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–¥–Ω–µ–π)</label>
                    <input
                      type="number"
                      min="1"
                      step="1"
                      value={formData.expiryDays}
                      onChange={(e) => setFormData({ ...formData, expiryDays: e.target.value })}
                      className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-orange-500"
                      placeholder="7"
                    />
                    <p className="text-xs text-gray-400 mt-1">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞</p>
                  </div>
                  <div className="flex items-center">
                    <div className="p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg w-full">
                      <p className="text-sm text-blue-400">
                        ‚è∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ: <span className="font-bold">
                          {getExpiryDate(formData.expiryDays)}
                        </span>
                      </p>
                      {formData.expiryDays && parseInt(formData.expiryDays) > 0 && (
                        <p className="text-xs text-gray-400 mt-1">
                          –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {formData.expiryDays} {parseInt(formData.expiryDays) === 1 ? '–¥–µ–Ω—å' : parseInt(formData.expiryDays) < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}
                        </p>
                      )}
                    </div>
                  </div>
                </div>
              </div>

              {/* –°–µ–∫—Ü–∏—è —Ü–µ–Ω—ã */}
              <div className="border-t border-gray-700 pt-4">
                <h3 className="text-lg font-semibold mb-4 text-orange-400">üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">–¶–µ–Ω–∞ –±—Ä—É—Ç—Ç–æ (‚ÇΩ)</label>
                    <input
                      type="text"
                      inputMode="decimal"
                      value={formData.priceBrutto}
                      onChange={(e) => {
                        const value = e.target.value;
                        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫—É –∏ –∑–∞–ø—è—Ç—É—é
                        if (value === '' || /^[0-9]+([.,][0-9]*)?$/.test(value)) {
                          setFormData(prev => ({ ...prev, priceBrutto: value }));
                          
                          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –Ω–µ—Ç—Ç–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç—Ö–æ–¥–∞
                          if (value && formData.wastePercentage) {
                            const bruttoPrice = parseFloat(normalizeNumberInput(value));
                            const wastePercent = parseFloat(normalizeNumberInput(formData.wastePercentage));
                            if (bruttoPrice > 0 && wastePercent >= 0 && wastePercent <= 100) {
                              const nettoPrice = bruttoPrice / (1 - wastePercent / 100);
                              setFormData(prev => ({ ...prev, priceBrutto: value, priceNetto: nettoPrice.toFixed(2) }));
                            }
                          }
                        }
                      }}
                      onBlur={(e) => {
                        if (e.target.value) {
                          const formatted = formatNumber(e.target.value, 2);
                          setFormData(prev => ({ ...prev, priceBrutto: formatted }));
                        }
                      }}
                      className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-orange-500"
                      placeholder="1000,50 –∏–ª–∏ 1000.50"
                    />
                    <p className="text-xs text-gray-400 mt-1">–¶–µ–Ω–∞ –∑–∞ –±—Ä—É—Ç—Ç–æ –≤–µ—Å</p>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2">–¶–µ–Ω–∞ –Ω–µ—Ç—Ç–æ (‚ÇΩ)</label>
                    <input
                      type="text"
                      inputMode="decimal"
                      value={formData.priceNetto}
                      onChange={(e) => {
                        const value = e.target.value;
                        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫—É –∏ –∑–∞–ø—è—Ç—É—é
                        if (value === '' || /^[0-9]+([.,][0-9]*)?$/.test(value)) {
                          setFormData(prev => ({ ...prev, priceNetto: value }));
                        }
                      }}
                      onBlur={(e) => {
                        if (e.target.value) {
                          const formatted = formatNumber(e.target.value, 2);
                          setFormData(prev => ({ ...prev, priceNetto: formatted }));
                        }
                      }}
                      className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-orange-500"
                      placeholder="1222,22 –∏–ª–∏ 1222.22"
                    />
                    <p className="text-xs text-gray-400 mt-1">–¶–µ–Ω–∞ –∑–∞ —á–∏—Å—Ç—ã–π –≤–µ—Å</p>
                  </div>
                </div>

                {formData.priceBrutto && formData.priceNetto && (
                  <div className="mt-3 p-3 bg-purple-500/10 border border-purple-500/30 rounded-lg">
                    <p className="text-sm text-purple-400">
                      üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –±—Ä—É—Ç—Ç–æ: <span className="font-bold">{parseFloat(formData.priceBrutto).toFixed(2)} ‚ÇΩ</span>
                      {" | "}
                      üíé –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ—Ç—Ç–æ: <span className="font-bold">{parseFloat(formData.priceNetto).toFixed(2)} ‚ÇΩ</span>
                      {formData.wastePercentage && (
                        <>
                          {" | "}
                          üìä –ù–∞—Ü–µ–Ω–∫–∞: <span className="font-bold">
                            {((parseFloat(formData.priceNetto) / parseFloat(formData.priceBrutto) - 1) * 100).toFixed(1)}%
                          </span>
                        </>
                      )}
                    </p>
                  </div>
                )}
              </div>

              <div className="flex gap-3">
                <button
                  type="submit"
                  className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition"
                >
                  {editingIngredient ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"}
                </button>
                <button
                  type="button"
                  onClick={handleCancel}
                  className="px-6 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ */}
        {ingredients.length === 0 ? (
          <div className="bg-gray-800 rounded-lg shadow-xl p-12 text-center">
            <Package2 className="w-16 h-16 text-gray-600 mx-auto mb-4" />
            <p className="text-gray-400 text-lg">–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
            <button
              onClick={() => setShowForm(true)}
              className="mt-4 px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition"
            >
              –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
            </button>
          </div>
        ) : displayedIngredients.length === 0 ? (
          <div className="bg-gray-800 rounded-lg shadow-xl p-12 text-center">
            <Package2 className="w-16 h-16 text-gray-600 mx-auto mb-4" />
            <p className="text-gray-400 text-lg">
              –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ &quot;{categories.find(c => c.value === selectedCategory)?.label}&quot; –Ω–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            </p>
            <button
              onClick={() => setSelectedCategory("all")}
              className="mt-4 px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition"
            >
              –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            </button>
          </div>
        ) : (
          <div className="bg-gray-800 rounded-lg shadow-xl overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-700">
                  <tr>
                    <th className="px-6 py-4 text-left text-sm font-semibold">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th className="px-6 py-4 text-left text-sm font-semibold">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                    <th className="px-6 py-4 text-left text-sm font-semibold">–ü–∞—Ä—Ç–∏–∏</th>
                    <th className="px-6 py-4 text-center text-sm font-semibold">–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-700">
                  {displayedIngredients.map((group) => {
                    const isExpanded = expandedGroups.has(group.name);
                    const totalBatches = group.batches.length;
                    const firstBatch = group.batches[0];
                    const categoryLabel = firstBatch.category 
                      ? categories.find(c => c.value === firstBatch.category)?.label || firstBatch.category
                      : null;
                    
                    return (
                      <React.Fragment key={group.name}>
                        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ */}
                        <tr className="hover:bg-gray-700/50 transition cursor-pointer">
                          <td className="px-6 py-4">
                            <button
                              onClick={() => toggleGroup(group.name)}
                              className="flex items-center gap-3 text-left w-full"
                            >
                              <span className={`transform transition-transform text-orange-500 ${isExpanded ? 'rotate-90' : ''}`}>
                                ‚ñ∂
                              </span>
                              <span className="font-bold text-lg text-white">{group.name}</span>
                            </button>
                          </td>
                          <td className="px-6 py-4">
                            <span className="text-gray-300">{categoryLabel || "‚Äî"}</span>
                          </td>
                          <td className="px-6 py-4">
                            <span className="px-3 py-1.5 bg-orange-500/20 text-orange-400 rounded-lg font-semibold text-sm">
                              {totalBatches} {totalBatches === 1 ? '–ø–∞—Ä—Ç–∏—è' : totalBatches < 5 ? '–ø–∞—Ä—Ç–∏–∏' : '–ø–∞—Ä—Ç–∏–π'}
                            </span>
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex justify-center">
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  toggleGroup(group.name);
                                }}
                                className="px-4 py-2 bg-blue-500/20 hover:bg-blue-500/30 text-blue-400 rounded-lg transition text-sm"
                              >
                                {isExpanded ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –ø–∞—Ä—Ç–∏–∏
                              </button>
                            </div>
                          </td>
                        </tr>
                        
                        {/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –ø–∞—Ä—Ç–∏–∏ */}
                        {isExpanded && (
                          <tr>
                            <td colSpan={4} className="px-0 py-0">
                              <div className="bg-gray-750 border-t border-gray-700">
                                {(() => {
                                  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π
                                  const totalBrutto = group.batches.reduce((sum, b) => sum + (b.bruttoWeight || 0), 0);
                                  const totalNetto = group.batches.reduce((sum, b) => sum + (b.nettoWeight || 0), 0);
                                  const totalPriceBrutto = group.batches.reduce((sum, b) => sum + (b.priceBrutto || 0), 0);
                                  const totalPriceNetto = group.batches.reduce((sum, b) => sum + (b.priceNetto || 0), 0);
                                  const avgWaste = totalBrutto > 0 ? ((totalBrutto - totalNetto) / totalBrutto * 100) : 0;
                                  
                                  return (
                                    <>
                                      {/* –°—Ç—Ä–æ–∫–∞ —Å –æ–±—â–∏–º–∏ —Å—É–º–º–∞–º–∏ */}
                                      <div className="bg-gradient-to-r from-orange-500/10 to-purple-500/10 border-b-2 border-orange-500/30 px-6 py-4">
                                        <div className="flex flex-wrap items-center gap-6 text-sm">
                                          <div className="flex items-center gap-2">
                                            <span className="text-gray-400 font-medium">üì¶ –û–±—â–∏–π –≤–µ—Å:</span>
                                            <span className="text-white font-bold">
                                              –ë—Ä—É—Ç—Ç–æ: {totalBrutto.toFixed(3)} {getUnitLabel(group.batches[0].unit)}
                                            </span>
                                            <span className="text-gray-500">|</span>
                                            <span className="text-green-400 font-bold">
                                              –ù–µ—Ç—Ç–æ: {totalNetto.toFixed(3)} {getUnitLabel(group.batches[0].unit)}
                                            </span>
                                            <span className="text-gray-500">|</span>
                                            <span className="text-orange-400 font-medium">
                                              –û—Ç—Ö–æ–¥: {avgWaste.toFixed(1)}%
                                            </span>
                                          </div>
                                          <div className="flex items-center gap-2 border-l border-gray-600 pl-6">
                                            <span className="text-gray-400 font-medium">üí∞ –û–±—â–∞—è —Ü–µ–Ω–∞:</span>
                                            <span className="text-white font-bold">
                                              –ë—Ä—É—Ç—Ç–æ: {totalPriceBrutto.toFixed(2)} ‚ÇΩ
                                            </span>
                                            <span className="text-gray-500">|</span>
                                            <span className="text-green-400 font-bold">
                                              –ù–µ—Ç—Ç–æ: {totalPriceNetto.toFixed(2)} ‚ÇΩ
                                            </span>
                                          </div>
                                        </div>
                                      </div>
                                    </>
                                  );
                                })()}
                                
                                <table className="w-full">
                                  <thead className="bg-gray-700/50">
                                    <tr>
                                      <th className="px-6 py-3 text-left text-xs font-semibold text-gray-400">‚Ññ –ü–∞—Ä—Ç–∏–∏</th>
                                      <th className="px-6 py-3 text-left text-xs font-semibold text-gray-400">–ë—Ä—É—Ç—Ç–æ</th>
                                      <th className="px-6 py-3 text-left text-xs font-semibold text-gray-400">–ù–µ—Ç—Ç–æ</th>
                                      <th className="px-6 py-3 text-left text-xs font-semibold text-gray-400">% –æ—Ç—Ö–æ–¥–∞</th>
                                      <th className="px-6 py-3 text-left text-xs font-semibold text-gray-400">–¶–µ–Ω–∞ –Ω–µ—Ç—Ç–æ</th>
                                      <th className="px-6 py-3 text-left text-xs font-semibold text-gray-400">–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏</th>
                                      <th className="px-6 py-3 text-left text-xs font-semibold text-gray-400">–ü–æ—Å—Ç–∞–≤—â–∏–∫</th>
                                      <th className="px-6 py-3 text-left text-xs font-semibold text-gray-400">–ò—Å—Ç–æ—Ä–∏—è</th>
                                      <th className="px-6 py-3 text-left text-xs font-semibold text-gray-400">–°—Ç–∞—Ç—É—Å</th>
                                      <th className="px-6 py-3 text-center text-xs font-semibold text-gray-400">–î–µ–π—Å—Ç–≤–∏—è</th>
                                    </tr>
                                  </thead>
                                  <tbody className="divide-y divide-gray-700/50">
                                    {group.batches.map((batch) => {
                                      const status = getExpiryStatus(batch.expiryDays);
                                      const expiryDate = batch.expiryDays 
                                        ? new Date(Date.now() + batch.expiryDays * 24 * 60 * 60 * 1000).toLocaleDateString('ru-RU')
                                        : null;
                                      
                                      return (
                                        <tr key={batch.id} className="hover:bg-gray-700/30 transition">
                                          <td className="px-6 py-3">
                                            {batch.batchNumber ? (
                                              <p className="text-xs font-mono text-purple-400 bg-purple-500/10 px-2 py-1 rounded inline-block">
                                                {batch.batchNumber}
                                              </p>
                                            ) : (
                                              <p className="text-gray-500 text-sm">‚Äî</p>
                                            )}
                                          </td>
                                          <td className="px-6 py-3">
                                            <p className="font-medium text-sm text-gray-200">
                                              {batch.bruttoWeight ? `${batch.bruttoWeight.toFixed(3)} ${getUnitLabel(batch.unit)}` : "‚Äî"}
                                            </p>
                                          </td>
                                          <td className="px-6 py-3">
                                            <p className="font-medium text-sm text-green-400">
                                              {batch.nettoWeight ? `${batch.nettoWeight.toFixed(3)} ${getUnitLabel(batch.unit)}` : "‚Äî"}
                                            </p>
                                          </td>
                                          <td className="px-6 py-3">
                                            <p className="text-sm text-gray-400">
                                              {batch.wastePercentage ? `${batch.wastePercentage.toFixed(1)}%` : "‚Äî"}
                                            </p>
                                          </td>
                                          <td className="px-6 py-3">
                                            {batch.priceNetto ? (
                                              <div>
                                                <p className="font-medium text-sm text-green-400">{batch.priceNetto.toFixed(2)} ‚ÇΩ</p>
                                                {batch.priceBrutto && (
                                                  <p className="text-xs text-gray-500 mt-0.5">
                                                    –±—Ä—É—Ç—Ç–æ: {batch.priceBrutto.toFixed(2)} ‚ÇΩ
                                                  </p>
                                                )}
                                              </div>
                                            ) : (
                                              <p className="text-gray-500 text-sm">‚Äî</p>
                                            )}
                                          </td>
                                          <td className="px-6 py-3">
                                            {batch.expiryDays ? (
                                              <div>
                                                <p className="text-sm font-medium text-gray-200">{batch.expiryDays} –¥–Ω.</p>
                                                {expiryDate && (
                                                  <p className="text-xs text-gray-500 mt-0.5">–¥–æ {expiryDate}</p>
                                                )}
                                              </div>
                                            ) : (
                                              <p className="text-gray-500 text-sm">‚Äî</p>
                                            )}
                                          </td>
                                          <td className="px-6 py-3">
                                            <p className="text-sm text-gray-400">{batch.supplier || "‚Äî"}</p>
                                          </td>
                                          <td className="px-6 py-3">
                                            <button
                                              onClick={() => fetchMovements(batch.id, batch.name, batch.batchNumber || "N/A")}
                                              className="flex items-center gap-2 px-2 py-1 bg-purple-500/20 hover:bg-purple-500/30 text-purple-400 rounded transition text-sm"
                                              title="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π"
                                            >
                                              <Package2 className="w-3 h-3" />
                                              <span className="font-medium">{batch.movementsCount || 0}</span>
                                            </button>
                                          </td>
                                          <td className="px-6 py-3">
                                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${status.bg} ${status.color}`}>
                                              {status.label}
                                            </span>
                                          </td>
                                          <td className="px-6 py-3">
                                            <div className="flex justify-center gap-2">
                                              <button
                                                onClick={() => handleEdit(batch)}
                                                className="p-1.5 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
                                                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                                              >
                                                <Edit2 className="w-3.5 h-3.5" />
                                              </button>
                                              <button
                                                onClick={() => handleDelete(batch.id, `${batch.name} (${batch.batchNumber})`)}
                                                className="p-1.5 bg-red-500 text-white rounded hover:bg-red-600 transition"
                                                title="–£–¥–∞–ª–∏—Ç—å"
                                              >
                                                <Trash2 className="w-3.5 h-3.5" />
                                              </button>
                                            </div>
                                          </td>
                                        </tr>
                                      );
                                    })}
                                  </tbody>
                                </table>
                              </div>
                            </td>
                          </tr>
                        )}
                      </React.Fragment>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        )}

        <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-gray-800 p-4 rounded-lg">
            <p className="text-gray-400 text-sm">–í—Å–µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤</p>
            <p className="text-2xl font-bold text-orange-500">{ingredients.length}</p>
          </div>
          <div className="bg-gray-800 p-4 rounded-lg">
            <p className="text-gray-400 text-sm">–°—Ä–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (‚â§3 –¥–Ω—è)</p>
            <p className="text-2xl font-bold text-red-500">
              {ingredients.filter((i) => i.expiryDays && i.expiryDays <= 3).length}
            </p>
          </div>
          <div className="bg-gray-800 p-4 rounded-lg">
            <p className="text-gray-400 text-sm">–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç (‚â§7 –¥–Ω–µ–π)</p>
            <p className="text-2xl font-bold text-yellow-500">
              {ingredients.filter((i) => i.expiryDays && i.expiryDays > 3 && i.expiryDays <= 7).length}
            </p>
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π */}
        {showMovementsModal && selectedIngredientMovements && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
            <div className="bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
              <div className="p-6 border-b border-gray-700">
                <div className="flex justify-between items-center">
                  <div>
                    <h2 className="text-2xl font-bold text-white">
                      üì¶ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
                    </h2>
                    <p className="text-gray-400 mt-1">
                      {selectedIngredientMovements.ingredientName}
                    </p>
                  </div>
                  <button
                    onClick={() => {
                      setShowMovementsModal(false);
                      setSelectedIngredientMovements(null);
                    }}
                    className="text-gray-400 hover:text-white transition"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>

              <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
                {selectedIngredientMovements.movements.length === 0 ? (
                  <div className="text-center py-12">
                    <Package2 className="w-16 h-16 text-gray-600 mx-auto mb-4" />
                    <p className="text-gray-400">–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø—É—Å—Ç–∞</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {selectedIngredientMovements.movements.map((movement, index) => {
                      const date = new Date(movement.createdAt);
                      const formattedDate = date.toLocaleDateString('ru-RU', {
                        day: '2-digit',
                        month: '2-digit',
                        year: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                      });

                      return (
                        <div key={movement.id} className="bg-gray-700/50 rounded-lg p-4 border border-gray-600">
                          <div className="flex justify-between items-start">
                            <div className="flex-1">
                              <div className="flex items-center gap-3 mb-2">
                                <span className="text-lg font-bold text-white">
                                  #{selectedIngredientMovements.movements.length - index}
                                </span>
                                <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                                  movement.type === 'addition' 
                                    ? 'bg-green-500/20 text-green-400' 
                                    : movement.type === 'removal'
                                    ? 'bg-red-500/20 text-red-400'
                                    : 'bg-blue-500/20 text-blue-400'
                                }`}>
                                  {movement.type === 'addition' ? '‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ' : 
                                   movement.type === 'removal' ? '‚ûñ –°–ø–∏—Å–∞–Ω–∏–µ' : 
                                   'üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞'}
                                </span>
                              </div>
                              
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-3">
                                <div>
                                  <p className="text-gray-400 text-sm">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</p>
                                  <p className="text-white font-semibold text-lg">
                                    {movement.quantity > 0 ? '+' : ''}{movement.quantity}
                                  </p>
                                </div>
                                <div>
                                  <p className="text-gray-400 text-sm">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</p>
                                  <p className="text-white font-medium">{formattedDate}</p>
                                </div>
                              </div>

                              {movement.notes && (
                                <div className="mt-3 p-3 bg-gray-800 rounded border border-gray-600">
                                  <p className="text-gray-400 text-sm mb-1">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</p>
                                  <p className="text-white">{movement.notes}</p>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </div>

              <div className="p-6 border-t border-gray-700 bg-gray-800/50">
                <div className="flex justify-between items-center">
                  <p className="text-gray-400">
                    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <span className="text-white font-semibold">{selectedIngredientMovements.movements.length}</span>
                  </p>
                  <button
                    onClick={() => {
                      setShowMovementsModal(false);
                      setSelectedIngredientMovements(null);
                    }}
                    className="px-6 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition"
                  >
                    –ó–∞–∫—Ä—ã—Ç—å
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
