// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ —Å –æ–±—â–∏–º–∏ —Å—É–º–º–∞–º–∏ –ø–∞—Ä—Ç–∏–π

import React from 'react';
import { Ingredient } from '../types';
import { getUnitLabel } from '../utils';
import { formatVolumeDisplay } from '../utils/calculations';

type BatchSummaryPanelProps = {
  batches: Ingredient[];
  unit: string;
};

export const BatchSummaryPanel: React.FC<BatchSummaryPanelProps> = ({ 
  batches, 
  unit
}) => {
  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π
  const totalBrutto = batches.reduce((sum, b) => sum + (b.bruttoWeight || 0), 0);
  const totalNetto = batches.reduce((sum, b) => sum + (b.nettoWeight || 0), 0);
  // priceNetto —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏, –∞ –Ω–µ —Ü–µ–Ω—É –∑–∞ –∫–≥
  const totalPrice = batches.reduce((sum, b) => sum + (b.priceNetto || 0), 0);
  const avgWaste = totalBrutto > 0 ? ((totalBrutto - totalNetto) / totalBrutto * 100) : 0;

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å pricePerUnit)
  const batchesWithPrice = batches.filter(b => b.pricePerUnit && b.pricePerUnit > 0);
  const avgPricePerUnit = batchesWithPrice.length > 0
    ? batchesWithPrice.reduce((sum, b) => sum + (b.pricePerUnit || 0), 0) / batchesWithPrice.length
    : 0;

  return (
    <div className="bg-gradient-to-r from-orange-500/10 to-purple-500/10 border-b-2 border-orange-500/30 px-6 py-4">
      <div className="flex flex-wrap items-center gap-6 text-sm">
        <div className="flex items-center gap-2">
          <span className="text-gray-400 font-medium">üì¶ –û–±—â–∏–π –≤–µ—Å:</span>
          <span className="text-white font-bold">
            –ë—Ä—É—Ç—Ç–æ: {formatVolumeDisplay(totalBrutto, unit)}
            {unit !== 'ml' && unit !== 'l' && ` ${getUnitLabel(unit)}`}
          </span>
          <span className="text-gray-500">|</span>
          <span className="text-green-400 font-bold">
            –ù–µ—Ç—Ç–æ: {formatVolumeDisplay(totalNetto, unit)}
            {unit !== 'ml' && unit !== 'l' && ` ${getUnitLabel(unit)}`}
          </span>
          <span className="text-gray-500">|</span>
          <span className="text-orange-400 font-medium">
            –û—Ç—Ö–æ–¥: {avgWaste.toFixed(1)}%
          </span>
        </div>
        <div className="flex items-center gap-2 border-l border-gray-600 pl-6">
          <span className="text-gray-400 font-medium">üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π:</span>
          <span className="text-green-400 font-bold text-lg">
            {totalPrice.toFixed(2)} ‚ÇΩ
          </span>
          {avgPricePerUnit > 0 && (
            <>
              <span className="text-gray-500">|</span>
              <span className="text-blue-400 font-medium">
                ~{avgPricePerUnit.toFixed(2)} ‚ÇΩ/{unit === 'g' || unit === 'kg' ? '–∫–≥' : unit === 'ml' || unit === 'l' ? '–ª' : '—à—Ç'}
              </span>
              <span className="text-xs text-gray-500">(—Å—Ä–µ–¥–Ω—è—è)</span>
            </>
          )}
        </div>
      </div>
    </div>
  );
};
