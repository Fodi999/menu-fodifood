import { useState } from "react";
import { X, Save } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import type { Product, ProductFormData } from "../types";
import { CATEGORIES } from "../types";

interface ProductFormProps {
  product: Product | null;
  onSubmit: (data: ProductFormData) => Promise<void>;
  onCancel: () => void;
}

export function ProductForm({ product, onSubmit, onCancel }: ProductFormProps) {
  const [formData, setFormData] = useState<ProductFormData>({
    name: product?.name || "",
    description: product?.description || "",
    price: product?.price.toString() || "",
    imageUrl: product?.imageUrl || "",
    weight: product?.weight || "",
    category: product?.category || "–†–æ–ª–ª—ã",
    isVisible: product?.isVisible ?? false,
  });

  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    try {
      await onSubmit(formData);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Card className="mb-6 bg-gray-800/50 border-gray-700 backdrop-blur-xl">
      <CardHeader className="pb-4">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
          <div className="flex-1">
            <CardTitle className="text-xl sm:text-2xl text-orange-500">
              {product ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç" : "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç"}
            </CardTitle>
            <CardDescription className="text-xs sm:text-sm mt-1">
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
            </CardDescription>
          </div>
          <Button
            type="button"
            variant="ghost"
            size="sm"
            onClick={onCancel}
            className="text-gray-400 hover:text-white self-end sm:self-auto"
          >
            <X className="w-4 h-4" />
          </Button>
        </div>
      </CardHeader>

      <CardContent className="px-4 sm:px-6">
        <form onSubmit={handleSubmit} className="space-y-4 sm:space-y-6">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="border-b border-gray-700 pb-4 sm:pb-6">
            <h3 className="text-base sm:text-lg font-semibold mb-3 sm:mb-4 text-orange-400 flex items-center gap-2">
              üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4">
              {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
              <div className="space-y-2">
                <Label htmlFor="name" className="text-sm font-medium text-gray-300">
                  –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ *
                </Label>
                <Input
                  id="name"
                  type="text"
                  required
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  className="bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è"
                />
                <p className="text-xs text-gray-400">
                  üí° –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥—è—Ç –∫–ª–∏–µ–Ω—Ç—ã
                </p>
              </div>

              {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
              <div className="space-y-2">
                <Label htmlFor="category" className="text-sm font-medium text-gray-300">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
                </Label>
                <Select
                  value={formData.category}
                  onValueChange={(value) => setFormData({ ...formData, category: value })}
                >
                  <SelectTrigger className="bg-gray-700 border-gray-600 text-white">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                  </SelectTrigger>
                  <SelectContent className="bg-gray-800 border-gray-700">
                    {CATEGORIES.map((cat) => (
                      <SelectItem key={cat} value={cat} className="text-white hover:bg-gray-700">
                        {cat}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <p className="text-xs text-gray-400">
                  üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ –º–µ–Ω—é
                </p>
              </div>

              {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="description" className="text-sm font-medium text-gray-300">
                  –û–ø–∏—Å–∞–Ω–∏–µ
                </Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  className="bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:ring-orange-500 focus:border-orange-500 min-h-[80px]"
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞..."
                />
                <p className="text-xs text-gray-400">
                  üìù –û–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                </p>
              </div>
            </div>
          </div>

          {/* –¶–µ–Ω–∞ –∏ –≤–µ—Å */}
          <div className="border-b border-gray-700 pb-4 sm:pb-6">
            <h3 className="text-base sm:text-lg font-semibold mb-3 sm:mb-4 text-orange-400 flex items-center gap-2">
              üí∞ –¶–µ–Ω–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4">
              {/* –¶–µ–Ω–∞ */}
              <div className="space-y-2">
                <Label htmlFor="price" className="text-sm font-medium text-gray-300">
                  –¶–µ–Ω–∞ (‚ÇΩ) *
                </Label>
                <Input
                  id="price"
                  type="text"
                  required
                  inputMode="decimal"
                  value={formData.price}
                  onChange={(e) => {
                    const value = e.target.value;
                    if (value === '' || /^[0-9]+([.,][0-9]*)?$/.test(value)) {
                      setFormData({ ...formData, price: value.replace(',', '.') });
                    }
                  }}
                  onBlur={(e) => {
                    if (e.target.value) {
                      const num = parseFloat(e.target.value);
                      if (!isNaN(num)) {
                        setFormData({ ...formData, price: num.toFixed(2) });
                      }
                    }
                  }}
                  className="bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="450.00"
                />
                <p className="text-xs text-gray-400">
                  üíµ –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ç–æ—á–∫—É
                </p>
                {formData.price && !isNaN(parseFloat(formData.price)) && (
                  <div className="p-2 bg-green-500/10 border border-green-500/30 rounded-lg">
                    <p className="text-xs sm:text-sm text-green-400">
                      ‚úÖ –¶–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: <span className="font-bold">{parseFloat(formData.price).toFixed(2)} ‚ÇΩ</span>
                    </p>
                  </div>
                )}
              </div>

              {/* –í–µ—Å */}
              <div className="space-y-2">
                <Label htmlFor="weight" className="text-sm font-medium text-gray-300">
                  –í–µ—Å –ø–æ—Ä—Ü–∏–∏
                </Label>
                <Input
                  id="weight"
                  type="text"
                  value={formData.weight}
                  onChange={(e) => setFormData({ ...formData, weight: e.target.value })}
                  className="bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="280–≥"
                />
                <p className="text-xs text-gray-400">
                  ‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 280–≥, 300–º–ª)
                </p>
              </div>
            </div>
          </div>

          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
          <div className="border-b border-gray-700 pb-4 sm:pb-6">
            <h3 className="text-base sm:text-lg font-semibold mb-3 sm:mb-4 text-orange-400 flex items-center gap-2">
              üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4">
              {/* URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
              <div className="space-y-2">
                <Label htmlFor="imageUrl" className="text-sm font-medium text-gray-300">
                  URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                </Label>
                <Input
                  id="imageUrl"
                  type="url"
                  value={formData.imageUrl}
                  onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}
                  className="bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="/products/california.jpg"
                />
                <p className="text-xs text-gray-400">
                  üì∑ –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
                </p>
              </div>

              {/* –ü—Ä–µ–≤—å—é */}
              <div className="space-y-2">
                <Label className="text-sm font-medium text-gray-300">–ü—Ä–µ–≤—å—é</Label>
                {formData.imageUrl ? (
                  <div className="relative w-full h-32 sm:h-40 bg-gray-700 rounded-lg overflow-hidden border-2 border-orange-500/30">
                    <img
                      src={formData.imageUrl}
                      alt="Preview"
                      className="w-full h-full object-cover"
                      onError={(e) => {
                        (e.target as HTMLImageElement).style.display = 'none';
                        (e.target as HTMLImageElement).parentElement!.innerHTML = '<div class="w-full h-full flex items-center justify-center text-gray-500"><p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
                      }}
                    />
                  </div>
                ) : (
                  <div className="w-full h-32 sm:h-40 bg-gray-700 rounded-lg flex items-center justify-center border-2 border-dashed border-gray-600">
                    <p className="text-gray-500 text-sm">üì∑ –ü—Ä–µ–≤—å—é –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å</p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* –í–∏–¥–∏–º–æ—Å—Ç—å */}
          <div className="border-b border-gray-700 pb-4 sm:pb-6">
            <h3 className="text-base sm:text-lg font-semibold mb-3 sm:mb-4 text-orange-400 flex items-center gap-2">
              üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ
            </h3>
            
            <div className="flex items-center gap-3">
              <input
                type="checkbox"
                id="isVisible"
                checked={formData.isVisible}
                onChange={(e) => setFormData({ ...formData, isVisible: e.target.checked })}
                className="w-4 h-4 text-orange-500 bg-gray-700 border-gray-600 rounded focus:ring-orange-500"
              />
              <Label htmlFor="isVisible" className="text-sm text-gray-300 cursor-pointer">
                –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
              </Label>
            </div>
            <p className="text-xs text-gray-400 mt-2 ml-7">
              {formData.isVisible 
                ? "‚úÖ –ü—Ä–æ–¥—É–∫—Ç –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞–º" 
                : "üîí –ü—Ä–æ–¥—É–∫—Ç –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏)"
              }
            </p>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex flex-col sm:flex-row gap-3 pt-2">
            <Button
              type="submit"
              disabled={isSubmitting}
              className="flex-1 bg-orange-500 hover:bg-orange-600 text-white font-semibold"
            >
              {isSubmitting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                <>
                  <Save className="w-4 h-4 mr-2" />
                  {product ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"}
                </>
              )}
            </Button>
            <Button
              type="button"
              onClick={onCancel}
              variant="outline"
              disabled={isSubmitting}
              className="flex-1 border-gray-600 text-gray-300 hover:bg-gray-700"
            >
              <X className="w-4 h-4 mr-2" />
              –û—Ç–º–µ–Ω–∞
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}
