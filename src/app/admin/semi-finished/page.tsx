"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/contexts/AuthContext";
import { UserRole } from "@/types/user";
import api from "@/lib/api";
import { Trash2, Loader2 } from "lucide-react";

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import {
  SemiFinishedHeader,
  SemiFinishedTable,
  ErrorMessage,
} from "./components";

type Ingredient = {
  id: string; // StockItem ID
  ingredientId: string; // Ingredient ID (–¥–ª—è —Å–≤—è–∑–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π Ingredient)
  name: string;
  unit: string;
  priceNetto: number | null;
  nettoWeight: number | null;
  category: string | null;
};

type SemiFinishedIngredient = {
  ingredientId: string;
  ingredientName: string;
  quantity: number;
  unit: string;
  pricePerUnit: number;
  totalPrice: number;
};

type SemiFinished = {
  id: string;
  name: string;
  description: string | null;
  outputQuantity: number;
  outputUnit: string;
  costPerUnit: number;
  category: string;
  createdAt: string;
};

type SemiFinishedFormData = {
  name: string;
  description: string;
  outputQuantity: string;
  outputUnit: string;
  category: string;
};

export default function AdminSemiFinishedPage() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();
  const [semiFinished, setSemiFinished] = useState<SemiFinished[]>([]);
  const [ingredients, setIngredients] = useState<Ingredient[]>([]);
  const [selectedIngredients, setSelectedIngredients] = useState<SemiFinishedIngredient[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [showForm, setShowForm] = useState(false);
  const [editingItem, setEditingItem] = useState<SemiFinished | null>(null);
  const [selectedIngredientId, setSelectedIngredientId] = useState<string>("");
  const [ingredientQuantity, setIngredientQuantity] = useState<string>("");
  const [selectedIngredientCategory, setSelectedIngredientCategory] = useState<string>("all");
  const [hasThermalProcessing, setHasThermalProcessing] = useState<boolean>(false);
  const [formData, setFormData] = useState<SemiFinishedFormData>({
    name: "",
    description: "",
    outputQuantity: "",
    outputUnit: "g",
    category: "–†–∏—Å –∏ –∫—Ä—É–ø—ã",
  });

  const categories = [
    "–†–∏—Å –∏ –∫—Ä—É–ø—ã",
    "–°–æ—É—Å—ã –∏ –º–∞—Ä–∏–Ω–∞–¥—ã",
    "–ó–∞–≥–æ—Ç–æ–≤–∫–∏",
    "–û–≤–æ—â–Ω—ã–µ —Å–º–µ—Å–∏",
    "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ",
    "–ü—Ä–æ—á–µ–µ"
  ];

  const units = [
    { value: "g", label: "–≥ (–≥—Ä–∞–º–º—ã)" },
    { value: "kg", label: "–∫–≥ (–∫–∏–ª–æ–≥—Ä–∞–º–º—ã)" },
    { value: "ml", label: "–º–ª (–º–∏–ª–ª–∏–ª–∏—Ç—Ä—ã)" },
    { value: "l", label: "–ª (–ª–∏—Ç—Ä—ã)" },
    { value: "pcs", label: "—à—Ç (—à—Ç—É–∫–∏)" },
  ];

  const ingredientCategories = [
    { value: "all", label: "üì¶ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" },
    { value: "fish", label: "üêü –†—ã–±–∞" },
    { value: "seafood", label: "ü¶ê –ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã" },
    { value: "vegetables", label: "ü•¨ –û–≤–æ—â–∏" },
    { value: "rice", label: "üçö –†–∏—Å" },
    { value: "nori", label: "üåø –ù–æ—Ä–∏ –∏ –≤–æ–¥–æ—Ä–æ—Å–ª–∏" },
    { value: "sauces", label: "ü•´ –°–æ—É—Å—ã" },
    { value: "spices", label: "üßÇ –°–ø–µ—Ü–∏–∏" },
    { value: "cheese", label: "üßÄ –°—ã—Ä" },
    { value: "other", label: "üì¶ –ü—Ä–æ—á–µ–µ" },
  ];

  const filteredIngredients = selectedIngredientCategory === "all"
    ? ingredients
    : ingredients.filter(ing => ing.category === selectedIngredientCategory);

  useEffect(() => {
    if (!authLoading && (!user || user.role !== UserRole.BUSINESS_OWNER)) {
      router.push("/auth/signin?callbackUrl=/admin/semi-finished");
    }
  }, [user, authLoading, router]);

  useEffect(() => {
    if (user && user.role === UserRole.BUSINESS_OWNER) {
      fetchSemiFinished();
      fetchIngredients();
    }
  }, [user]);

  const fetchIngredients = async () => {
    try {
      const data = await api.get<any[]>("/admin/ingredients");
      const processedIngredients = Array.isArray(data)
        ? data.map((item: { id: number; ingredientId: number; ingredient?: { name?: string; unit?: string }; priceNetto: number; nettoWeight: number; category: string }) => ({
            id: String(item.id), // StockItem ID –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ingredientId: String(item.ingredientId), // Ingredient ID –¥–ª—è —Å–≤—è–∑–∏
            name: item.ingredient?.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            unit: item.ingredient?.unit || "g",
            priceNetto: item.priceNetto,
            nettoWeight: item.nettoWeight,
            category: item.category,
          }))
        : [];
      setIngredients(processedIngredients);
    } catch (err) {
      console.error("Error fetching ingredients:", err);
    }
  };

  const fetchSemiFinished = async () => {
    try {
      setLoading(true);
      const data = await api.get<SemiFinished[]>("/admin/semi-finished");
      setSemiFinished(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error("Error fetching semi-finished:", err);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã");
      setSemiFinished([]);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      const totalCost = calculateTotalCost();
      const outputQty = parseFloat(formData.outputQuantity);
      const costPerUnit = outputQty > 0 ? totalCost / outputQty : 0;

      const payload = {
        name: formData.name,
        description: formData.description || null,
        outputQuantity: outputQty,
        outputUnit: formData.outputUnit,
        costPerUnit: costPerUnit,
        category: formData.category,
        ingredients: selectedIngredients.map(ing => ({
          ingredientId: ing.ingredientId,
          ingredientName: ing.ingredientName,
          quantity: ing.quantity,
          unit: ing.unit,
          pricePerUnit: ing.pricePerUnit,
          totalPrice: ing.totalPrice,
        })),
      };

      if (editingItem) {
        await api.put(`/admin/semi-finished/${editingItem.id}`, payload);
      } else {
        await api.post("/admin/semi-finished", payload);
      }

      await fetchSemiFinished();
      
      setShowForm(false);
      setEditingItem(null);
      setSelectedIngredients([]);
      setFormData({
        name: "",
        description: "",
        outputQuantity: "",
        outputUnit: "g",
        category: "–†–∏—Å –∏ –∫—Ä—É–ø—ã",
      });

      alert(editingItem ? "–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!" : "–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!");
    } catch (err) {
      console.error("Error saving semi-finished:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.");
    }
  };

  const handleDelete = async (id: string, name: string) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç "${name}"?`)) {
      return;
    }

    try {
      await api.delete(`/admin/semi-finished/${id}`);
      setSemiFinished(semiFinished.filter((sf) => sf.id !== id));
      alert(`–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç "${name}" —É–¥–∞–ª—ë–Ω`);
    } catch (err) {
      console.error("Error deleting semi-finished:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç");
    }
  };

  const handleCancel = () => {
    setShowForm(false);
    setEditingItem(null);
    setSelectedIngredients([]);
    setSelectedIngredientId("");
    setIngredientQuantity("");
    setSelectedIngredientCategory("all");
    setHasThermalProcessing(false);
    setFormData({
      name: "",
      description: "",
      outputQuantity: "",
      outputUnit: "g",
      category: "–†–∏—Å –∏ –∫—Ä—É–ø—ã",
    });
  };

  const handleAddIngredient = () => {
    if (!selectedIngredientId || !ingredientQuantity) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ");
      return;
    }

    const ingredient = ingredients.find((ing) => ing.id === selectedIngredientId);
    if (!ingredient) return;

    if (selectedIngredients.some((si) => si.ingredientId === selectedIngredientId)) {
      alert("–≠—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω");
      return;
    }

    const quantity = parseFloat(ingredientQuantity);
    // –†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞
    // –î–ª—è —à—Ç—É—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: priceNetto = —Ü–µ–Ω–∞ –≤—Å–µ–π –ø–∞—Ä—Ç–∏–∏, nettoWeight = –∫–æ–ª-–≤–æ —à—Ç—É–∫
    // –î–ª—è –≤–µ—Å–æ–≤—ã—Ö: priceNetto = —Ü–µ–Ω–∞ –ø–∞—Ä—Ç–∏–∏, nettoWeight = –≤–µ—Å –ø–∞—Ä—Ç–∏–∏
    // => —Ü–µ–Ω–∞ –∑–∞ 1 –µ–¥. = priceNetto / nettoWeight
    const pricePerUnit = ingredient.priceNetto && ingredient.nettoWeight 
      ? ingredient.priceNetto / ingredient.nettoWeight 
      : 0;
    const totalPrice = pricePerUnit * quantity;

    const newIngredient: SemiFinishedIngredient = {
      ingredientId: ingredient.ingredientId, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º ingredientId –∏–∑ Ingredient —Ç–∞–±–ª–∏—Ü—ã
      ingredientName: ingredient.name,
      quantity,
      unit: ingredient.unit,
      pricePerUnit,
      totalPrice,
    };

    const updatedIngredients = [...selectedIngredients, newIngredient];
    setSelectedIngredients(updatedIngredients);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å –µ—Å–ª–∏ —Ç–µ—Ä–º–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
    if (!hasThermalProcessing) {
      const newTotalWeight = calculateTotalWeightFromIngredients(updatedIngredients);
      setFormData({ 
        ...formData, 
        outputQuantity: newTotalWeight.toFixed(3),
        outputUnit: 'g'
      });
    }
    
    setSelectedIngredientId("");
    setIngredientQuantity("");
  };

  const handleRemoveIngredient = (ingredientId: string) => {
    const updatedIngredients = selectedIngredients.filter((si) => si.ingredientId !== ingredientId);
    setSelectedIngredients(updatedIngredients);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å –µ—Å–ª–∏ —Ç–µ—Ä–º–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
    if (!hasThermalProcessing) {
      const newTotalWeight = calculateTotalWeightFromIngredients(updatedIngredients);
      setFormData({ 
        ...formData, 
        outputQuantity: newTotalWeight.toFixed(3),
        outputUnit: 'g'
      });
    }
  };

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–π –≤–µ—Å –∏–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
  const calculateTotalWeightFromIngredients = (ingredients: SemiFinishedIngredient[]): number => {
    return ingredients.reduce((sum, ing) => {
      // –°—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∫—Ä–æ–º–µ —à—Ç—É—á–Ω—ã—Ö
      if (ing.unit === 'pcs') {
        return sum;
      }
      return sum + ing.quantity;
    }, 0);
  };

  const calculateTotalCost = (): number => {
    return selectedIngredients.reduce((sum, ing) => sum + ing.totalPrice, 0);
  };

  const calculateCostPerUnit = (): number => {
    const totalCost = calculateTotalCost();
    const outputQty = parseFloat(formData.outputQuantity) || 0;
    return outputQty > 0 ? totalCost / outputQty : 0;
  };

  if (authLoading || loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <Loader2 className="w-12 h-12 text-cyan-500 animate-spin" />
      </div>
    );
  }

  if (!user || user.role !== UserRole.BUSINESS_OWNER) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-purple-950/20 py-8 sm:py-12 md:py-16 lg:py-20">
      <div className="max-w-7xl mx-auto px-3 sm:px-4 md:px-6">
        {/* Header —Å shadcn –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ */}
        <SemiFinishedHeader
          itemsCount={semiFinished.length}
          showForm={showForm}
          onToggleForm={() => setShowForm(!showForm)}
        />

        {/* Error message */}
        {error && <ErrorMessage message={error} />}

        {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        {showForm && (
          <div className="bg-gray-800 rounded-lg shadow-xl p-6 mb-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h2 className="text-2xl font-bold text-purple-500">
                  {editingItem ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç" : "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç"}
                </h2>
                <p className="text-sm text-gray-400 mt-1">
                  –ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã - —ç—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –±–ª—é–¥–∞—Ö
                </p>
              </div>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="border-b border-gray-700 pb-6">
                <h3 className="text-lg font-semibold mb-4 text-cyan-400 flex items-center gap-2">
                  üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">
                      –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞ *
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.name}
                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                      className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-cyan-500 transition"
                      placeholder="–†–∏—Å –¥–ª—è —Å—É—à–∏ –≥–æ—Ç–æ–≤—ã–π"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
                    <select
                      required
                      value={formData.category}
                      onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                      className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-cyan-500 transition"
                    >
                      {categories.map((cat) => (
                        <option key={cat} value={cat}>
                          {cat}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>

              {/* –í—ã—Ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
              <div className="border-b border-gray-700 pb-6">
                <h3 className="text-lg font-semibold mb-4 text-cyan-400 flex items-center gap-2">
                  üìä –í—ã—Ö–æ–¥ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                </h3>
                <div className="mb-3 p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg">
                  <label className="flex items-center gap-3 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={hasThermalProcessing}
                      onChange={(e) => {
                        setHasThermalProcessing(e.target.checked);
                        // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ–º —Ç–µ—Ä–º–æ–æ–±—Ä–∞–±–æ—Ç–∫—É, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
                        if (!e.target.checked && selectedIngredients.length > 0) {
                          const totalWeight = calculateTotalWeightFromIngredients(selectedIngredients);
                          setFormData({ 
                            ...formData, 
                            outputQuantity: totalWeight.toFixed(3),
                            outputUnit: 'g'
                          });
                        }
                      }}
                      className="w-5 h-5 text-cyan-500 bg-gray-700 border-gray-600 rounded focus:ring-cyan-500"
                    />
                    <div>
                      <span className="text-sm font-semibold text-white">üî• –ü—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Ä–º–æ–æ–±—Ä–∞–±–æ—Ç–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç –æ–±—ä–µ–º</span>
                      <p className="text-xs text-gray-400 mt-1">
                        {hasThermalProcessing 
                          ? "‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é —É–∫–∞–∑–∞—Ç—å –≤–µ—Å/–æ–±—ä–µ–º –Ω–∞ –≤—ã—Ö–æ–¥–µ" 
                          : "‚öñÔ∏è –í–µ—Å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å—É–º–º–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"
                        }
                      </p>
                    </div>
                  </label>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –≤—ã—Ö–æ–¥–µ *</label>
                    <input
                      type="text"
                      required
                      inputMode="decimal"
                      value={hasThermalProcessing ? formData.outputQuantity : (selectedIngredients.length > 0 ? calculateTotalWeightFromIngredients(selectedIngredients).toFixed(3) : formData.outputQuantity)}
                      onChange={(e) => {
                        if (hasThermalProcessing) {
                          const value = e.target.value;
                          if (value === '' || /^[0-9]+([.,][0-9]*)?$/.test(value)) {
                            setFormData({ ...formData, outputQuantity: value.replace(',', '.') });
                          }
                        }
                      }}
                      disabled={!hasThermalProcessing && selectedIngredients.length > 0}
                      className={`w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-cyan-500 transition ${
                        !hasThermalProcessing && selectedIngredients.length > 0 ? 'opacity-60 cursor-not-allowed' : ''
                      }`}
                      placeholder="1000"
                    />
                    {!hasThermalProcessing && selectedIngredients.length > 0 ? (
                      <p className="text-xs text-green-400 mt-1">
                        ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {calculateTotalWeightFromIngredients(selectedIngredients).toFixed(3)} –≥
                      </p>
                    ) : hasThermalProcessing ? (
                      <p className="text-xs text-orange-400 mt-1">
                        üî• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç {selectedIngredients.length > 0 ? calculateTotalWeightFromIngredients(selectedIngredients).toFixed(3) : '0'} –≥)
                      </p>
                    ) : (
                      <p className="text-xs text-gray-400 mt-1">
                        üí° –°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞
                      </p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è *</label>
                    <select
                      required
                      value={formData.outputUnit}
                      onChange={(e) => setFormData({ ...formData, outputUnit: e.target.value })}
                      disabled={!hasThermalProcessing && selectedIngredients.length > 0}
                      className={`w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-cyan-500 transition ${
                        !hasThermalProcessing && selectedIngredients.length > 0 ? 'opacity-60 cursor-not-allowed' : ''
                      }`}
                    >
                      {units.map((unit) => (
                        <option key={unit.value} value={unit.value}>
                          {unit.label}
                        </option>
                      ))}
                    </select>
                    {!hasThermalProcessing && selectedIngredients.length > 0 && (
                      <p className="text-xs text-green-400 mt-1">
                        üîí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –≥—Ä–∞–º–º—ã (–≥)
                      </p>
                    )}
                  </div>
                </div>
              </div>

              {/* –°–æ—Å—Ç–∞–≤ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã) */}
              <div className="border-b border-gray-700 pb-6">
                <h3 className="text-lg font-semibold mb-4 text-cyan-400 flex items-center gap-2">
                  üßÆ –°–æ—Å—Ç–∞–≤ –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
                </h3>
                
                <div className="mb-4 p-4 bg-gray-700/50 rounded-lg border border-gray-600">
                  <p className="text-sm font-medium mb-3 text-gray-300">
                    –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ —Å–∫–ª–∞–¥–∞
                  </p>
                  
                  <div className="mb-3">
                    <label className="block text-xs font-medium mb-2 text-gray-400">
                      1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    </label>
                    <div className="flex flex-wrap gap-2">
                      {ingredientCategories.map((cat) => {
                        const count = ingredients.filter(
                          ing => cat.value === "all" || ing.category === cat.value
                        ).length;
                        
                        if (count === 0 && cat.value !== "all") return null;
                        
                        return (
                          <button
                            key={cat.value}
                            type="button"
                            onClick={() => {
                              setSelectedIngredientCategory(cat.value);
                              setSelectedIngredientId("");
                            }}
                            className={`px-3 py-1.5 rounded-lg text-sm font-medium transition ${
                              selectedIngredientCategory === cat.value
                                ? "bg-cyan-500 text-white"
                                : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                            }`}
                          >
                            {cat.label}
                            <span className="ml-1.5 px-1.5 py-0.5 bg-white/20 rounded text-xs">
                              {count}
                            </span>
                          </button>
                        );
                      })}
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                    <div className="md:col-span-1">
                      <label className="block text-xs font-medium mb-2 text-gray-400">
                        2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
                      </label>
                      <select
                        value={selectedIngredientId}
                        onChange={(e) => setSelectedIngredientId(e.target.value)}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-cyan-500 text-sm"
                      >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç...</option>
                        {filteredIngredients.map((ing) => (
                          <option key={ing.id} value={ing.id}>
                            {ing.name} ({ing.unit})
                            {ing.priceNetto && ing.nettoWeight 
                              ? ` - ${(ing.priceNetto / ing.nettoWeight).toFixed(2)} ‚ÇΩ/${ing.unit}`
                              : ''
                            }
                          </option>
                        ))}
                      </select>
                    </div>
                    <div className="md:col-span-1">
                      <label className="block text-xs font-medium mb-2 text-gray-400">
                        3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                      </label>
                      <input
                        type="text"
                        inputMode="decimal"
                        value={ingredientQuantity}
                        onChange={(e) => {
                          const value = e.target.value;
                          if (value === '' || /^[0-9]+([.,][0-9]*)?$/.test(value)) {
                            setIngredientQuantity(value.replace(',', '.'));
                          }
                        }}
                        onBlur={(e) => {
                          if (e.target.value) {
                            const num = parseFloat(e.target.value);
                            if (!isNaN(num)) {
                              setIngredientQuantity(num.toFixed(3));
                            }
                          }
                        }}
                        placeholder="100.000"
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-cyan-500 text-sm"
                      />
                    </div>
                    <div className="md:col-span-1">
                      <label className="block text-xs font-medium mb-2 text-gray-400">
                        4Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å
                      </label>
                      <button
                        type="button"
                        onClick={handleAddIngredient}
                        disabled={!selectedIngredientId || !ingredientQuantity}
                        className={`w-full px-4 py-2 rounded-lg transition text-sm font-medium ${
                          !selectedIngredientId || !ingredientQuantity
                            ? "bg-gray-600 text-gray-400 cursor-not-allowed"
                            : "bg-green-600 hover:bg-green-700 text-white"
                        }`}
                      >
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å
                      </button>
                    </div>
                  </div>
                </div>

                {selectedIngredients.length > 0 && (
                  <div className="mb-4">
                    <div className="bg-gray-700/30 rounded-lg overflow-hidden">
                      <table className="w-full text-sm">
                        <thead className="bg-gray-700">
                          <tr>
                            <th className="px-4 py-2 text-left font-medium">–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç</th>
                            <th className="px-4 py-2 text-right font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                            <th className="px-4 py-2 text-right font-medium">–¶–µ–Ω–∞ –∑–∞ –µ–¥.</th>
                            <th className="px-4 py-2 text-right font-medium">–°—É–º–º–∞</th>
                            <th className="px-4 py-2 text-center font-medium">–î–µ–π—Å—Ç–≤–∏–µ</th>
                          </tr>
                        </thead>
                        <tbody className="divide-y divide-gray-600">
                          {selectedIngredients.map((ing) => (
                            <tr key={ing.ingredientId} className="hover:bg-gray-700/30">
                              <td className="px-4 py-2 text-gray-300">{ing.ingredientName}</td>
                              <td className="px-4 py-2 text-right text-gray-300">
                                {ing.quantity.toFixed(3)} {ing.unit}
                              </td>
                              <td className="px-4 py-2 text-right text-gray-400">
                                {ing.pricePerUnit.toFixed(3)} ‚ÇΩ
                              </td>
                              <td className="px-4 py-2 text-right font-medium text-green-400">
                                {ing.totalPrice.toFixed(2)} ‚ÇΩ
                              </td>
                              <td className="px-4 py-2 text-center">
                                <button
                                  type="button"
                                  onClick={() => handleRemoveIngredient(ing.ingredientId)}
                                  className="p-1 bg-red-500/20 hover:bg-red-500/40 text-red-400 rounded transition"
                                  title="–£–¥–∞–ª–∏—Ç—å"
                                >
                                  <Trash2 className="w-4 h-4" />
                                </button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}

                {selectedIngredients.length > 0 && (
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                    <div className="p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg">
                      <p className="text-xs text-blue-400 font-medium mb-1">–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</p>
                      <p className="text-lg font-bold text-blue-300">
                        {calculateTotalCost().toFixed(2)} ‚ÇΩ
                      </p>
                      <p className="text-xs text-gray-400 mt-1">
                        üí° –¶–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∏–∑ —Å–∫–ª–∞–¥–∞
                      </p>
                    </div>
                    <div className="p-3 bg-purple-500/10 border border-purple-500/30 rounded-lg">
                      <p className="text-xs text-purple-400 font-medium mb-1">–í—ã—Ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞</p>
                      <p className="text-lg font-bold text-purple-300">
                        {formData.outputQuantity || '‚Äî'} {formData.outputUnit}
                      </p>
                    </div>
                    <div className="p-3 bg-cyan-500/10 border border-cyan-500/30 rounded-lg">
                      <p className="text-xs text-cyan-400 font-medium mb-1">–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É</p>
                      <p className="text-lg font-bold text-cyan-300">
                        {calculateCostPerUnit().toFixed(3)} ‚ÇΩ/{formData.outputUnit}
                      </p>
                    </div>
                  </div>
                )}
              </div>

              {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
              <div className="border-b border-gray-700 pb-6">
                <h3 className="text-lg font-semibold mb-4 text-cyan-400 flex items-center gap-2">
                  üìù –û–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
                </h3>
                <div>
                  <label className="block text-sm font-medium mb-2">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    rows={4}
                    className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-cyan-500 transition"
                    placeholder="–ü—Ä–æ–º—ã—Ç—å —Ä–∏—Å 3 —Ä–∞–∑–∞, –æ—Ç–≤–∞—Ä–∏—Ç—å —Å —Ä–∏—Å–æ–≤—ã–º —É–∫—Å—É—Å–æ–º..."
                  />
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
              <div className="flex gap-3 pt-4">
                <button
                  type="submit"
                  className="flex-1 md:flex-none px-8 py-3 bg-cyan-500 text-white rounded-lg hover:bg-cyan-600 transition font-semibold shadow-lg hover:shadow-cyan-500/50"
                >
                  {editingItem ? "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "‚ú® –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç"}
                </button>
                <button
                  type="button"
                  onClick={handleCancel}
                  className="flex-1 md:flex-none px-8 py-3 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition font-semibold"
                >
                  ‚ùå –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤ —Å shadcn */}
        <SemiFinishedTable
          items={semiFinished}
          onEdit={(item) => {
            setEditingItem(item);
            setShowForm(true);
          }}
          onDelete={handleDelete}
        />
      </div>
    </div>
  );
}
