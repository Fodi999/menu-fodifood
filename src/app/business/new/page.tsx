"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useTranslation } from "react-i18next";
import { businessesApi } from "@/lib/rust-api";
import { useAuth } from "@/contexts/AuthContext";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Loader2, Store, ArrowLeft, Sparkles } from "lucide-react";
import Link from "next/link";
import { BusinessCategory } from "@/types/business";
import type { CreateBusinessDto } from "@/types/business";
import { motion } from "framer-motion";

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
 * 
 * URL: /business/new
 * 
 * –§–æ—Ä–º–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞:
 * - –ù–∞–∑–≤–∞–Ω–∏–µ
 * - –û–ø–∏—Å–∞–Ω–∏–µ
 * - –ö–∞—Ç–µ–≥–æ—Ä–∏—è
 * - –ì–æ—Ä–æ–¥
 */
export default function NewBusinessPage() {
  const router = useRouter();
  const { t } = useTranslation(["business", "common"]);
  const { user } = useAuth();

  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [category, setCategory] = useState<BusinessCategory | "">("");
  const [city, setCity] = useState("");

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ signup
  if (!user) {
    router.push('/auth/signup?redirect=/business/new');
    return null;
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name.trim()) {
      setError("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
      return;
    }
    if (!category) {
      setError("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞");
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      const createDto: CreateBusinessDto = {
        name: name.trim(),
        slug: "",  // Backend —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        description: description.trim(),
        category: category as BusinessCategory,
        city: city.trim(),
        address: "",  // –ü–æ–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ–º
        phone: "",    // –ü–æ–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ–º
        email: "",    // –ü–æ–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ–º
      };
      
      console.log('üöÄ Creating business:', createDto);
      const newBusiness = await businessesApi.create(createDto);
      console.log('‚úÖ Business created:', newBusiness);

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
      router.push(`/business/${newBusiness.id}`);
    } catch (err: any) {
      console.error('‚ùå Failed to create business:', err);
      setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å');
    } finally {
      setLoading(false);
    }
  };

  const categories = [
    { value: BusinessCategory.RESTAURANT, label: "–†–µ—Å—Ç–æ—Ä–∞–Ω" },
    { value: BusinessCategory.CAFE, label: "–ö–∞—Ñ–µ" },
    { value: BusinessCategory.BAKERY, label: "–ü–µ–∫–∞—Ä–Ω—è" },
    { value: BusinessCategory.SUSHI, label: "–°—É—à–∏" },
    { value: BusinessCategory.PIZZA, label: "–ü–∏—Ü—Ü–∞" },
    { value: BusinessCategory.FASTFOOD, label: "–§–∞—Å—Ç—Ñ—É–¥" },
    { value: BusinessCategory.HEALTHY, label: "–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ" },
    { value: BusinessCategory.DESSERTS, label: "–î–µ—Å–µ—Ä—Ç—ã" },
    { value: BusinessCategory.OTHER, label: "–î—Ä—É–≥–æ–µ" },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-gray-100 py-12 px-4">
      <div className="max-w-2xl mx-auto">
        {/* Back Button */}
        <Button
          asChild
          variant="ghost"
          className="mb-6 text-gray-400 hover:text-white"
        >
          <Link href="/">
            <ArrowLeft className="w-4 h-4 mr-2" />
            {t("common:buttons.back")}
          </Link>
        </Button>

        {/* Header */}
        <motion.div
          className="text-center mb-8 space-y-4"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <div className="flex justify-center">
            <div className="w-20 h-20 rounded-2xl bg-gradient-to-br from-orange-500 to-yellow-500 flex items-center justify-center shadow-2xl">
              <Store className="w-10 h-10 text-white" />
            </div>
          </div>
          <h1 className="text-4xl font-bold bg-gradient-to-r from-orange-400 to-yellow-400 bg-clip-text text-transparent">
            –°–æ–∑–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç
          </h1>
          <p className="text-gray-400 max-w-md mx-auto">
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ FODI MARKET
          </p>
        </motion.div>

        {/* Form Card */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <Card className="bg-gray-800/50 border-gray-700 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-orange-400" />
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–µ
              </CardTitle>
              <CardDescription className="text-gray-400">
                –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ
              </CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Name */}
                <div className="space-y-2">
                  <Label htmlFor="name" className="text-white">
                    –ù–∞–∑–≤–∞–Ω–∏–µ *
                  </Label>
                  <Input
                    id="name"
                    name="name"
                    type="text"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°—É—à–∏ –ë–∞—Ä –¢–æ–∫–∏–æ"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    required
                    className="bg-gray-900/50 border-gray-600 text-white placeholder:text-gray-500 focus:border-orange-500"
                  />
                </div>

                {/* Category */}
                <div className="space-y-2">
                  <Label htmlFor="category" className="text-white">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
                  </Label>
                  <select
                    id="category"
                    name="category"
                    value={category}
                    onChange={(e) => setCategory(e.target.value as BusinessCategory)}
                    required
                    className="w-full h-10 px-3 rounded-md bg-gray-900/50 border border-gray-600 text-white focus:border-orange-500 focus:outline-none focus:ring-2 focus:ring-orange-500/20"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                    {categories.map((cat) => (
                      <option key={cat.value} value={cat.value}>
                        {cat.label}
                      </option>
                    ))}
                  </select>
                </div>

                {/* City */}
                <div className="space-y-2">
                  <Label htmlFor="city" className="text-white">
                    –ì–æ—Ä–æ–¥
                  </Label>
                  <Input
                    id="city"
                    name="city"
                    type="text"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞"
                    value={city}
                    onChange={(e) => setCity(e.target.value)}
                    className="bg-gray-900/50 border-gray-600 text-white placeholder:text-gray-500 focus:border-orange-500"
                  />
                </div>

                {/* Description */}
                <div className="space-y-2">
                  <Label htmlFor="description" className="text-white">
                    –û–ø–∏—Å–∞–Ω–∏–µ
                  </Label>
                  <Textarea
                    id="description"
                    name="description"
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ..."
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    rows={4}
                    className="bg-gray-900/50 border-gray-600 text-white placeholder:text-gray-500 focus:border-orange-500 resize-none"
                  />
                </div>

                {/* Error Message */}
                {error && (
                  <div className="p-3 rounded-lg bg-red-500/10 border border-red-500/50 text-red-400 text-sm">
                    {error}
                  </div>
                )}

                {/* Submit Button */}
                <Button
                  type="submit"
                  disabled={loading}
                  className="w-full bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 text-white font-semibold py-6 text-lg shadow-xl hover:shadow-2xl hover:shadow-orange-500/50 transition-all duration-300"
                >
                  {loading ? (
                    <>
                      <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                      –°–æ–∑–¥–∞–Ω–∏–µ...
                    </>
                  ) : (
                    <>
                      <Store className="w-5 h-5 mr-2" />
                      –°–æ–∑–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å
                    </>
                  )}
                </Button>
              </form>
            </CardContent>
          </Card>
        </motion.div>

        {/* Info Cards */}
        <motion.div
          className="mt-8 grid md:grid-cols-3 gap-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.4 }}
        >
          <Card className="bg-gray-800/30 border-gray-700">
            <CardContent className="pt-6 text-center">
              <div className="text-3xl mb-2">üéØ</div>
              <div className="text-sm font-medium text-white">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</div>
              <div className="text-xs text-gray-400 mt-1">–ë–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π</div>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/30 border-gray-700">
            <CardContent className="pt-6 text-center">
              <div className="text-3xl mb-2">üöÄ</div>
              <div className="text-sm font-medium text-white">–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</div>
              <div className="text-xs text-gray-400 mt-1">–ó–∞–ø—É—Å–∫ –∑–∞ 2 –º–∏–Ω—É—Ç—ã</div>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/30 border-gray-700">
            <CardContent className="pt-6 text-center">
              <div className="text-3xl mb-2">üí∞</div>
              <div className="text-sm font-medium text-white">–ë–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
              <div className="text-xs text-gray-400 mt-1">–£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–¥–∞–∂–∏</div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  );
}
