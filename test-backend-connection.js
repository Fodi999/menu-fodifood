#!/usr/bin/env node

// üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–µ–∫–µ–Ω–¥—É
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

const BASE_URL = 'https://irrelevant-nellie-fodi999-aefe2c9f.koyeb.app';

async function testEndpoint(endpoint, method = 'GET', body = null, headers = {}) {
  try {
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É—é: ${method} ${endpoint}`);
    
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    if (body) {
      options.body = JSON.stringify(body);
    }

    const response = await fetch(`${BASE_URL}${endpoint}`, options);
    
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const data = await response.text();
      try {
        const jsonData = JSON.parse(data);
        console.log(`   ‚úÖ –û—Ç–≤–µ—Ç:`, jsonData);
        return { success: true, data: jsonData };
      } catch {
        console.log(`   ‚úÖ –û—Ç–≤–µ—Ç (text):`, data.slice(0, 100) + (data.length > 100 ? '...' : ''));
        return { success: true, data };
      }
    } else {
      const errorText = await response.text();
      console.log(`   ‚ùå –û—à–∏–±–∫–∞:`, errorText);
      return { success: false, error: errorText };
    }
  } catch (error) {
    console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:`, error.message);
    return { success: false, error: error.message };
  }
}

async function runTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∫–µ–Ω–¥–∞...');
  console.log(`üì° URL: ${BASE_URL}`);
  
  const tests = [
    // Health check
    ['/api/health', 'GET'],
    
    // Products API
    ['/api/products', 'GET'],
    
    // Test auth endpoints (without actual credentials)
    ['/api/auth/register', 'POST', { 
      email: 'test@example.com', 
      password: 'testpass', 
      name: 'Test User' 
    }],
    
    // Check CORS
    ['/api/products', 'OPTIONS'],
  ];

  const results = [];
  
  for (const [endpoint, method, body, headers] of tests) {
    const result = await testEndpoint(endpoint, method, body, headers);
    results.push({ endpoint, method, ...result });
    await new Promise(resolve => setTimeout(resolve, 500)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  }

  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('================================');
  
  let successCount = 0;
  results.forEach(({ endpoint, method, success, error }) => {
    const status = success ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${method} ${endpoint}`);
    if (error && !success) {
      console.log(`    –û—à–∏–±–∫–∞: ${error}`);
    }
    if (success) successCount++;
  });
  
  console.log(`\nüìà –£—Å–ø–µ—à–Ω–æ: ${successCount}/${results.length} —Ç–µ—Å—Ç–æ–≤`);
  
  if (successCount === results.length) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ë–µ–∫–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∫–µ–Ω–¥–∞.');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);
