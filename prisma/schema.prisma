// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  password      String? // Хешированный пароль для credentials провайдера
  emailVerified DateTime?
  image         String?
  role          Role          @default(user)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  messages      ChatMessage[]
}

// Модели для NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String              @id @default(cuid())
  name        String
  description String?
  price       Decimal             @db.Decimal(10, 2)
  imageUrl    String?
  weight      String? // 250g, 300g etc
  category    String // Роллы, Суши, Сеты, Напитки
  createdAt   DateTime            @default(now())
  techCard    TechCard?
  orderItems  OrderItem[]
  ingredients ProductIngredient[]
}

model Ingredient {
  id         String              @id @default(cuid())
  name       String
  unit       String // g, ml, pcs
  createdAt  DateTime            @default(now())
  stockItems StockItem[]
  products   ProductIngredient[]
}

model StockItem {
  id           String     @id @default(cuid())
  ingredientId String
  quantity     Float
  updatedAt    DateTime   @updatedAt
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
}

model ProductIngredient {
  productId    String
  ingredientId String
  amount       Float
  unit         String
  product      Product    @relation(fields: [productId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([productId, ingredientId])
}

model TechCard {
  id        String  @id @default(cuid())
  productId String  @unique
  steps     Json? // Шаги приготовления
  imageUrl  String?
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    String      @default("pending") // pending, confirmed, preparing, delivering, delivered, cancelled
  total     Decimal     @db.Decimal(10, 2)
  address   String // Адрес доставки
  phone     String // Телефон клиента
  comment   String? // Комментарий к заказу
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model ChatMessage {
  id          String   @id @default(cuid())
  userId      String
  isFromAdmin Boolean  @default(false)
  content     String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}
