#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö
 */

const fs = require('fs');
const path = require('path');

const LOCALES_DIR = path.join(__dirname, '..', 'src', 'locales');
const LANGUAGES = ['en', 'ru', 'pl'];

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
function getKeys(obj, prefix = '') {
  const keys = [];
  
  for (const [key, value] of Object.entries(obj)) {
    const fullKey = prefix ? `${prefix}.${key}` : key;
    
    if (typeof value === 'object' && !Array.isArray(value) && value !== null) {
      keys.push(...getKeys(value, fullKey));
    } else {
      keys.push(fullKey);
    }
  }
  
  return keys;
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞
function loadTranslation(lang) {
  const filePath = path.join(LOCALES_DIR, lang, 'ns1.json');
  
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    return JSON.parse(content);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${lang}/ns1.json:`, error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function checkTranslations() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');
  
  const translations = {};
  const allKeys = new Set();
  
  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏
  for (const lang of LANGUAGES) {
    translations[lang] = loadTranslation(lang);
    
    if (translations[lang]) {
      const keys = getKeys(translations[lang]);
      keys.forEach(key => allKeys.add(key));
      console.log(`‚úÖ ${lang}: ${keys.length} –∫–ª—é—á–µ–π`);
    }
  }
  
  console.log(`\nüìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π: ${allKeys.size}\n`);
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
  let hasErrors = false;
  
  for (const lang of LANGUAGES) {
    const missingKeys = [];
    
    if (!translations[lang]) {
      console.log(`‚ùå ${lang}: —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω`);
      continue;
    }
    
    const langKeys = new Set(getKeys(translations[lang]));
    
    for (const key of allKeys) {
      if (!langKeys.has(key)) {
        missingKeys.push(key);
      }
    }
    
    if (missingKeys.length > 0) {
      hasErrors = true;
      console.log(`‚ùå ${lang}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${missingKeys.length} –∫–ª—é—á–µ–π:`);
      missingKeys.forEach(key => console.log(`   - ${key}`));
      console.log('');
    } else {
      console.log(`‚úÖ ${lang}: –≤—Å–µ –∫–ª—é—á–∏ –Ω–∞ –º–µ—Å—Ç–µ`);
    }
  }
  
  if (!hasErrors) {
    console.log('\nüéâ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø–æ—Ä—è–¥–∫–µ!');
    process.exit(0);
  } else {
    console.log('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
checkTranslations();
